{
  "address": "0x7f1bD57edA6995d3a4136C07f85bf7013C5f8243",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyAlreadySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CashStrategyRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Exchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ExchangerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "name": "StrategyWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "UsdcUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAndBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategyWeights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyWeight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cashStrategy",
          "type": "address"
        }
      ],
      "name": "setCashStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "_strategyWeights",
          "type": "tuple[]"
        }
      ],
      "name": "setStrategyWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "name": "setUsdc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "solcInputHash": "935387231f9ec9ee3304e26bd95216f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyAlreadySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CashStrategyRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ExchangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"name\":\"StrategyWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"UsdcUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategyWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashStrategy\",\"type\":\"address\"}],\"name\":\"setCashStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"_strategyWeights\",\"type\":\"tuple[]\"}],\"name\":\"setStrategyWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"setUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioManager.sol\":\"PortfolioManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"contracts/PortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\ncontract PortfolioManager is IPortfolioManager, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    // ---  fields\\n\\n    address public exchanger;\\n    IERC20 usdc;\\n    mapping(address => uint256) public strategyWeightPositions;\\n    StrategyWeight[] public strategyWeights;\\n    IStrategy public cashStrategy;\\n\\n\\n\\n    // ---  events\\n\\n    event ExchangerUpdated(address value);\\n    event UsdcUpdated(address value);\\n    event CashStrategyAlreadySet(address value);\\n    event CashStrategyUpdated(address value);\\n    event CashStrategyRestaked(uint256 value);\\n    event Exchanged(uint256 amount, address from, address to);\\n\\n    event StrategyWeightUpdated(\\n        uint256 index,\\n        address strategy,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight,\\n        bool enabled,\\n        bool enabledReward\\n    );\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier cashStrategySet() {\\n        require(address(cashStrategy) != address(0), \\\"Cash strategy not set yet\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  setters\\n\\n    function setExchanger(address _exchanger) public onlyAdmin {\\n        require(_exchanger != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(EXCHANGER, exchanger);\\n        grantRole(EXCHANGER, _exchanger);\\n\\n        exchanger = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    function setUsdc(address _usdc) public onlyAdmin {\\n        require(_usdc != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdc = IERC20(_usdc);\\n        emit UsdcUpdated(_usdc);\\n    }\\n\\n    function setCashStrategy(address _cashStrategy) public onlyAdmin {\\n        require(_cashStrategy != address(0), \\\"Zero address not allowed\\\");\\n\\n        if (_cashStrategy == address(cashStrategy)) {\\n            emit CashStrategyAlreadySet(_cashStrategy);\\n            return;\\n        }\\n        bool needMoveCash = address(cashStrategy) != address(0);\\n        if (needMoveCash) {\\n            // unstake everything\\n            //TODO: may be claiming should be in unstakeFull?\\n            cashStrategy.claimRewards(address(this));\\n            cashStrategy.unstake(\\n                address(usdc),\\n                0,\\n                address(this),\\n                true\\n            );\\n        }\\n\\n        cashStrategy = IStrategy(_cashStrategy);\\n\\n        if (needMoveCash) {\\n            uint256 amount = usdc.balanceOf(address(this));\\n            if (amount > 0) {\\n                usdc.transfer(address(cashStrategy), amount);\\n                cashStrategy.stake(\\n                    address(usdc),\\n                    amount\\n                );\\n                emit CashStrategyRestaked(amount);\\n            }\\n        }\\n\\n        emit CashStrategyUpdated(_cashStrategy);\\n    }\\n\\n\\n\\n    // ---  logic\\n\\n    function deposit(IERC20 _token, uint256 _amount) external override onlyExchanger cashStrategySet {\\n        require(address(_token) == address(usdc), \\\"PM: Only USDC now available to deposit\\\");\\n\\n        // 1. get cashStrategy current usdc amount\\n        // 2. get cashStrategy upper limit\\n        // 3. if _amount + current < limit then just stake to cash strategy\\n        // 4. else call _balance\\n\\n        uint256 pmUsdcBalance = usdc.balanceOf(address(this));\\n        if (pmUsdcBalance == 0) {\\n            // zero usdc amount always fit in cash strategy but also zero stake result\\n            // so we can return now\\n            return;\\n        }\\n\\n        uint256 totalUsdc = pmUsdcBalance;\\n        uint256 totalWeight = 0;\\n        for (uint8 i; i < strategyWeights.length; i++) {\\n            if (!strategyWeights[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n            totalUsdc += IStrategy(strategyWeights[i].strategy).netAssetValue();\\n            totalWeight += strategyWeights[i].targetWeight;\\n        }\\n\\n        uint256 currentCashLiquidity = cashStrategy.netAssetValue();\\n        StrategyWeight memory cashStrategyWeight = getStrategyWeight(address(cashStrategy));\\n        //TODO: can be optimized by saving previous totalUsdc gere and in balance\\n        uint256 maxCashLiquidity = (totalUsdc * cashStrategyWeight.maxWeight) / totalWeight;\\n\\n        if (currentCashLiquidity + pmUsdcBalance < maxCashLiquidity) {\\n            // we may add _amount to cash strategy without balancing\\n            usdc.transfer(address(cashStrategy), pmUsdcBalance);\\n            cashStrategy.stake(\\n                address(usdc),\\n                pmUsdcBalance\\n            );\\n            return;\\n        }\\n\\n        _balance();\\n    }\\n\\n\\n    function withdraw(IERC20 _token, uint256 _amount)\\n    external\\n    override\\n    onlyExchanger\\n    cashStrategySet\\n    returns (uint256)\\n    {\\n        require(address(_token) == address(usdc), \\\"PM: Only USDC now available to withdraw\\\");\\n\\n        // if cash strategy has enough liquidity then prevent balancing\\n        uint256 liquidationValue = cashStrategy.liquidationValue();\\n        if (liquidationValue > _amount) {\\n            cashStrategy.unstake(\\n                address(usdc),\\n                _amount,\\n                address(this),\\n                false\\n            );\\n        } else {\\n            // balance to needed amount\\n            _balance(_token, _amount);\\n        }\\n\\n        uint256 currentBalance = _token.balanceOf(address(this));\\n\\n        // `if` is cheaper then `require` when need build complex message\\n        if (currentBalance < _amount) {\\n            revert(string(\\n                abi.encodePacked(\\n                    \\\"In portfolioManager not enough for transfer _amount: \\\",\\n                    Strings.toString(currentBalance),\\n                    \\\" < \\\",\\n                    Strings.toString(_amount)\\n                )\\n            ));\\n        }\\n\\n        // transfer back tokens\\n        _token.transfer(exchanger, _amount);\\n\\n        return _amount;\\n    }\\n\\n    function claimAndBalance() external override onlyExchanger {\\n        _claimRewards();\\n        _balance();\\n    }\\n\\n    function _claimRewards() internal {\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        for (uint8 i; i < strategies.length; i++) {\\n            StrategyWeight memory item = strategies[i];\\n\\n            if (item.enabledReward) {\\n                IStrategy(item.strategy).claimRewards(address(this));\\n            }\\n        }\\n    }\\n\\n    function balance() public override onlyAdmin {\\n        _balance();\\n    }\\n\\n    function _balance() internal {\\n        // Same to zero withdrawal balance\\n        _balance(IERC20(address(0)), 0);\\n    }\\n\\n    function _balance(IERC20 withdrawToken, uint256 withdrawAmount) internal {\\n\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        // 1. calc total USDC equivalent\\n        uint256 totalUsdc = usdc.balanceOf(address(this));\\n        uint256 totalWeight = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            // UnstakeFull from Strategies with targetWeight == 0\\n            if(strategies[i].targetWeight == 0){\\n                totalUsdc += IStrategy(strategies[i].strategy).unstake(\\n                    address(usdc),\\n                    0,\\n                    address(this),\\n                    true\\n                );\\n            }else {\\n                totalUsdc += IStrategy(strategies[i].strategy).netAssetValue();\\n                totalWeight += strategies[i].targetWeight;\\n            }\\n\\n        }\\n\\n        if (address(withdrawToken) == address(usdc)) {\\n            require(totalUsdc >= withdrawAmount, \\\"Trying withdraw more than liquidity available\\\");\\n            // it make to move to PortfolioManager extra USDC to withdraw\\n            totalUsdc = totalUsdc - withdrawAmount;\\n        }\\n\\n        // 3. calc diffs for strategies liquidity\\n        Order[] memory stakeOrders = new Order[](strategies.length);\\n        uint8 stakeOrdersCount = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            uint256 targetLiquidity;\\n            if (strategies[i].targetWeight == 0) {\\n                targetLiquidity = 0;\\n            } else {\\n                targetLiquidity = (totalUsdc * strategies[i].targetWeight) / totalWeight;\\n            }\\n\\n            uint256 currentLiquidity = IStrategy(strategies[i].strategy).netAssetValue();\\n            if (targetLiquidity == currentLiquidity) {\\n                // skip already at target strategies\\n                continue;\\n            }\\n\\n            if (targetLiquidity < currentLiquidity) {\\n                // unstake now\\n                IStrategy(strategies[i].strategy).unstake(\\n                    address(usdc),\\n                    currentLiquidity - targetLiquidity,\\n                    address(this),\\n                    false\\n                );\\n            } else {\\n                // save to stake later\\n                stakeOrders[stakeOrdersCount] = Order(\\n                    true,\\n                    strategies[i].strategy,\\n                    targetLiquidity - currentLiquidity\\n                );\\n                stakeOrdersCount++;\\n            }\\n        }\\n\\n        // 4.  make staking\\n        for (uint8 i; i < stakeOrdersCount; i++) {\\n\\n            address strategy = stakeOrders[i].strategy;\\n            uint256 amount = stakeOrders[i].amount;\\n\\n            usdc.transfer(strategy, amount);\\n\\n            IStrategy(strategy).stake(\\n                address(usdc),\\n                amount\\n            );\\n        }\\n\\n    }\\n\\n    function setStrategyWeights(StrategyWeight[] calldata _strategyWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _strategyWeights.length; i++) {\\n            StrategyWeight memory strategyWeight = _strategyWeights[i];\\n            require(strategyWeight.strategy != address(0), \\\"weight without strategy\\\");\\n            require(\\n                strategyWeight.minWeight <= strategyWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                strategyWeight.targetWeight <= strategyWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += strategyWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _strategyWeights.length; i++) {\\n            _addStrategyWeightAt(_strategyWeights[i], i);\\n            strategyWeightPositions[strategyWeights[i].strategy] = i;\\n        }\\n\\n        // truncate if need\\n        if (strategyWeights.length > _strategyWeights.length) {\\n            uint256 removeCount = strategyWeights.length - _strategyWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                strategyWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addStrategyWeightAt(StrategyWeight memory strategyWeight, uint256 index) internal {\\n        uint256 currentLength = strategyWeights.length;\\n        // expand if need\\n        if (currentLength == 0 || currentLength - 1 < index) {\\n            uint256 additionalCount = index - currentLength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                strategyWeights.push();\\n            }\\n        }\\n        strategyWeights[index] = strategyWeight;\\n        emit StrategyWeightUpdated(\\n            index,\\n            strategyWeight.strategy,\\n            strategyWeight.minWeight,\\n            strategyWeight.targetWeight,\\n            strategyWeight.maxWeight,\\n            strategyWeight.enabled,\\n            strategyWeight.enabledReward\\n        );\\n    }\\n\\n\\n    function getStrategyWeight(address strategy) public override view returns (StrategyWeight memory) {\\n        return strategyWeights[strategyWeightPositions[strategy]];\\n    }\\n\\n    function getAllStrategyWeights() public override view returns (StrategyWeight[] memory) {\\n        return strategyWeights;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x96bc9d178c599f6b4aa11abd8e826dcf8ac9efc769ca986ec463df5857fb2fb9\",\"license\":\"MIT\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    function deposit(IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external returns (uint256);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n}\\n\",\"keccak256\":\"0x8cd672ce8e53709ed107ec90c20c7bb6c98eb85f4a08d04f9921f1c69a26e51d\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x5ab9e7a2e8db364aa1fea32b7c006210be000109947cdfa05439c1c3118a344f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff168062000033575060005460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000be576000805461ffff19166101011790555b8015620000d1576000805461ff00191690555b5060805160601c6136be62000106600039600081816107340152818161077401528181610c890152610cc901526136be6000f3fe60806040526004361061019c5760003560e01c80638129fc1c116100ec578063cb1468791161008a578063ed2a2f9d11610064578063ed2a2f9d146104ec578063f281d43814610503578063f3fef3a314610525578063f72c0d8b1461054557600080fd5b8063cb1468791461048c578063d547741f146104ac578063da909b09146104cc57600080fd5b8063a217fddf116100c6578063a217fddf1461042b578063b69ef8a814610440578063bd0f105314610455578063c6bbf4cb1461047757600080fd5b80638129fc1c1461039b5780638e6c8ab3146103b057806391d148541461040b57600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461031b57806359d57c1a1461032e5780636115640c1461034e57806375e8bdfa1461036e57600080fd5b80633659cfe6146102bb57806347e7ef24146102db5780634d12fca4146102fb57600080fd5b806301ffc9a7146101a157806306e73924146101d6578063248a9ca31461020357806329cb1bee146102415780632f2ff15d1461027957806336568abe1461029b575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612ff1565b610579565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004612e51565b6105b0565b6040516101cd9190613479565b34801561020f57600080fd5b5061023361021e366004612fa8565b60009081526065602052604090206001015490565b6040519081526020016101cd565b34801561024d57600080fd5b5060ff54610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101cd565b34801561028557600080fd5b50610299610294366004612fc1565b61067b565b005b3480156102a757600080fd5b506102996102b6366004612fc1565b6106a6565b3480156102c757600080fd5b506102996102d6366004612e51565b610729565b3480156102e757600080fd5b506102996102f636600461301b565b6107f2565b34801561030757600080fd5b5060fb54610261906001600160a01b031681565b610299610329366004612e6e565b610c7e565b34801561033a57600080fd5b50610299610349366004612e51565b610d34565b34801561035a57600080fd5b50610299610369366004612f16565b61110b565b34801561037a57600080fd5b50610233610389366004612e51565b60fd6020526000908152604090205481565b3480156103a757600080fd5b50610299611468565b3480156103bc57600080fd5b506103d06103cb366004612fa8565b611518565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c0016101cd565b34801561041757600080fd5b506101c1610426366004612fc1565b61156f565b34801561043757600080fd5b50610233600081565b34801561044c57600080fd5b5061029961159a565b34801561046157600080fd5b5061023360008051602061364283398151915281565b34801561048357600080fd5b506102996115cb565b34801561049857600080fd5b506102996104a7366004612e51565b611607565b3480156104b857600080fd5b506102996104c7366004612fc1565b6116a2565b3480156104d857600080fd5b506102996104e7366004612e51565b6116c8565b3480156104f857600080fd5b50610233620186a081565b34801561050f57600080fd5b506105186117a0565b6040516101cd9190613276565b34801561053157600080fd5b5061023361054036600461301b565b611849565b34801561055157600080fd5b506102337f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105aa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a083018290526001600160a01b038516825260fd9052919091205460fe8054909190811061060c5761060c6135f2565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015292915050565b6000828152606560205260409020600101546106978133611bc1565b6106a18383611bff565b505050565b6001600160a01b038116331461071b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107258282611c85565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107725760405162461bcd60e51b81526004016107129061332e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107a4611cec565b6001600160a01b0316146107ca5760405162461bcd60e51b81526004016107129061337a565b6107d381611d1a565b604080516000808252602082019092526107ef91839190611d45565b50565b61080a6000805160206136428339815191523361156f565b6108265760405162461bcd60e51b8152600401610712906132f7565b60ff546001600160a01b031661087a5760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b6044820152606401610712565b60fc546001600160a01b038381169116146108e65760405162461bcd60e51b815260206004820152602660248201527f504d3a204f6e6c792055534443206e6f7720617661696c61626c6520746f2064604482015265195c1bdcda5d60d21b6064820152608401610712565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561092a57600080fd5b505afa15801561093e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096291906130d9565b90508061096e57505050565b806000805b60fe5460ff82161015610aa65760fe8160ff1681548110610996576109966135f2565b600091825260209091206004600590920201015460ff166109b657610a94565b60fe8160ff16815481106109cc576109cc6135f2565b6000918252602091829020600590910201546040805163146ce76760e31b815290516001600160a01b039092169263a3673b3892600480840193829003018186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5291906130d9565b610a5c90846134b8565b925060fe8160ff1681548110610a7457610a746135f2565b90600052602060002090600502016002015482610a9191906134b8565b91505b80610a9e8161357c565b915050610973565b5060ff546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906130d9565b60ff54909150600090610b3f906001600160a01b03166105b0565b9050600083826060015186610b5491906134e4565b610b5e91906134d0565b905080610b6b87856134b8565b1015610c6c5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810189905291169063a9059cbb90604401602060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf99190612f8b565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810189905291169063adc9772e90604401600060405180830381600087803b158015610c4a57600080fd5b505af1158015610c5e573d6000803e3d6000fd5b505050505050505050505050565b610c74611e89565b5050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610cc75760405162461bcd60e51b81526004016107129061332e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cf9611cec565b6001600160a01b031614610d1f5760405162461bcd60e51b81526004016107129061337a565b610d2882611d1a565b61072582826001611d45565b610d3f60003361156f565b610d5b5760405162461bcd60e51b815260040161071290613414565b6001600160a01b038116610d815760405162461bcd60e51b815260040161071290613442565b60ff546001600160a01b0382811691161415610dd7576040516001600160a01b03821681527f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c906020015b60405180910390a150565b60ff546001600160a01b031615801590610ef95760ff54604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b158015610e3057600080fd5b505af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6891906130d9565b5060ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192610ea592911690600090309060019060040161324c565b602060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906130d9565b505b60ff80546001600160a01b0319166001600160a01b03841617905580156110cb5760fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9691906130d9565b905080156110c95760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190612f8b565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810184905291169063adc9772e90604401600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f816040516110c091815260200190565b60405180910390a15b505b6040516001600160a01b03831681527fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e39060200160405180910390a15050565b61111660003361156f565b6111325760405162461bcd60e51b815260040161071290613414565b6000805b60ff81168311156112c757600084848360ff16818110611158576111586135f2565b905060c0020180360381019061116e9190613047565b80519091506001600160a01b03166111c85760405162461bcd60e51b815260206004820152601760248201527f77656967687420776974686f75742073747261746567790000000000000000006044820152606401610712565b8060400151816020015111156112355760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b6064820152608401610712565b8060600151816040015111156112a25760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b6064820152608401610712565b60408101516112b190846134b8565b92505080806112bf9061357c565b915050611136565b50620186a0811461132c5760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b6064820152608401610712565b60005b60ff81168311156113cb5761137184848360ff16818110611352576113526135f2565b905060c002018036038101906113689190613047565b8260ff16611e94565b8060ff1660fd600060fe8460ff168154811061138f5761138f6135f2565b600091825260208083206005909202909101546001600160a01b03168352820192909252604001902055806113c38161357c565b91505061132f565b5060fe548210156106a15760fe546000906113e7908490613503565b905060005b818160ff1610156114615760fe805480611408576114086135dc565b60008281526020812060056000199093019283020180546001600160a01b031916815560018101829055600281018290556003810191909155600401805461ffff191690559055806114598161357c565b9150506113ec565b5050505050565b600054610100900460ff1680611481575060005460ff16155b61149d5760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff161580156114bf576000805461ffff19166101011790555b6114c761200c565b6114cf61207b565b6114da600033611bff565b6115047f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611bff565b80156107ef576000805461ff001916905550565b60fe818154811061152857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6115a560003361156f565b6115c15760405162461bcd60e51b815260040161071290613414565b6115c9611e89565b565b6115e36000805160206136428339815191523361156f565b6115ff5760405162461bcd60e51b8152600401610712906132f7565b6115c16120d9565b61161260003361156f565b61162e5760405162461bcd60e51b815260040161071290613414565b6001600160a01b0381166116545760405162461bcd60e51b815260040161071290613442565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f695697c154277ce40ee0efa7c478421fa81ae4802bc333c6a3425394285c20c890602001610dcc565b6000828152606560205260409020600101546116be8133611bc1565b6106a18383611c85565b6116d360003361156f565b6116ef5760405162461bcd60e51b815260040161071290613414565b6001600160a01b0381166117155760405162461bcd60e51b815260040161071290613442565b60fb5461173a90600080516020613642833981519152906001600160a01b03166116a2565b6117526000805160206136428339815191528261067b565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610dcc565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156118405760008481526020908190206040805160c0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015290835290920191016117c4565b50505050905090565b60006118636000805160206136428339815191523361156f565b61187f5760405162461bcd60e51b8152600401610712906132f7565b60ff546001600160a01b03166118d35760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b6044820152606401610712565b60fc546001600160a01b038481169116146119405760405162461bcd60e51b815260206004820152602760248201527f504d3a204f6e6c792055534443206e6f7720617661696c61626c6520746f20776044820152666974686472617760c81b6064820152608401610712565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a916004808301926020929190829003018186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd91906130d9565b905082811115611a5a5760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192611a02929116908790309060009060040161324c565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906130d9565b50611a64565b611a6484846121b0565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906130d9565b905083811015611b3157611af181612935565b611afa85612935565b604051602001611b0b929190613152565b60408051601f198184030181529082905262461bcd60e51b8252610712916004016132c4565b60fb5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529086169063a9059cbb90604401602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190612f8b565b5092949350505050565b611bcb828261156f565b61072557611be3816001600160a01b03166014612a3b565b611bee836020612a3b565b604051602001611b0b9291906131d7565b611c09828261156f565b6107255760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c8f828261156f565b156107255760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36107258133611bc1565b6000611d4f611cec565b9050611d5a84612bde565b600083511180611d675750815b15611d7857611d768484612c83565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661146157805460ff191660011781556040516001600160a01b0383166024820152611df790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612c83565b50805460ff19168155611e08611cec565b6001600160a01b0316826001600160a01b031614611e805760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610712565b61146185612d6e565b6115c96000806121b0565b60fe54801580611ead575081611eab600183613503565b105b15611efa576000611ebe8284613503565b611ec99060016134b8565b905060005b818160ff161015611ef75760fe8054600101815560005280611eef8161357c565b915050611ece565b50505b8260fe8381548110611f0e57611f0e6135f2565b600091825260209182902083516005929092020180546001600160a01b039283166001600160a01b0319909116178155838301516001820155604080850151600283015560608086015160038401556080808701516004909401805460a09889015115156101000261ff00199615159690961661ffff1990911617949094179093558851898601518a8401518b8401518c8701518d8b015187518e815295909916998501999099529483019190915291810191909152918201529115159282019290925290151560c08201527fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f29060e00160405180910390a1505050565b600054610100900460ff1680612025575060005460ff16155b6120415760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff16158015612063576000805461ffff19166101011790555b61206b612dae565b612073612dae565b611504612dae565b600054610100900460ff1680612094575060005460ff16155b6120b05760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff1615801561206b576000805461ffff1916610101179055612073612dae565b60006120e36117a0565b905060005b81518160ff161015610725576000828260ff168151811061210b5761210b6135f2565b602002602001015190508060a001511561219d578051604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b15801561216357600080fd5b505af1158015612177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219b91906130d9565b505b50806121a88161357c565b9150506120e8565b60006121ba6117a0565b60fc546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561220357600080fd5b505afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b91906130d9565b90506000805b83518160ff16101561243b57838160ff1681518110612262576122626135f2565b60200260200101516080015161227757612429565b838160ff168151811061228c5761228c6135f2565b6020026020010151604001516000141561235d57838160ff16815181106122b5576122b56135f2565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926122fa92911690600090309060019060040161324c565b602060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234c91906130d9565b61235690846134b8565b9250612429565b838160ff1681518110612372576123726135f2565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906130d9565b6123f890846134b8565b9250838160ff168151811061240f5761240f6135f2565b6020026020010151604001518261242691906134b8565b91505b806124338161357c565b915050612241565b5060fc546001600160a01b03868116911614156124c557838210156124b85760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b6064820152608401610712565b6124c28483613503565b91505b6000835167ffffffffffffffff8111156124e1576124e1613608565b60405190808252806020026020018201604052801561252c57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816124ff5790505b5090506000805b85518160ff1610156127d357858160ff1681518110612554576125546135f2565b602002602001015160800151612569576127c1565b6000868260ff1681518110612580576125806135f2565b6020026020010151604001516000141561259c575060006125d6565b84878360ff16815181106125b2576125b26135f2565b602002602001015160400151876125c991906134e4565b6125d391906134d0565b90505b6000878360ff16815181106125ed576125ed6135f2565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561263157600080fd5b505afa158015612645573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266991906130d9565b90508082141561267a5750506127c1565b8082101561273d57878360ff1681518110612697576126976135f2565b60209081029190910101515160fc546001600160a01b039182169163f6f6b88191166126c38585613503565b3060006040518563ffffffff1660e01b81526004016126e5949392919061324c565b602060405180830381600087803b1580156126ff57600080fd5b505af1158015612713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273791906130d9565b506127be565b6040518060600160405280600115158152602001898560ff1681518110612766576127666135f2565b6020026020010151600001516001600160a01b03168152602001828461278c9190613503565b815250858560ff16815181106127a4576127a46135f2565b602002602001018190525083806127ba9061357c565b9450505b50505b806127cb8161357c565b915050612533565b5060005b8160ff168160ff161015610c74576000838260ff16815181106127fc576127fc6135f2565b60200260200101516020015190506000848360ff1681518110612821576128216135f2565b602090810291909101015160409081015160fc54915163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905291935091169063a9059cbb90604401602060405180830381600087803b15801561288157600080fd5b505af1158015612895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b99190612f8b565b5060fc546040516356e4bb9760e11b81526001600160a01b039182166004820152602481018390529083169063adc9772e90604401600060405180830381600087803b15801561290857600080fd5b505af115801561291c573d6000803e3d6000fd5b505050505050808061292d9061357c565b9150506127d7565b6060816129595750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612983578061296d81613561565b915061297c9050600a836134d0565b915061295d565b60008167ffffffffffffffff81111561299e5761299e613608565b6040519080825280601f01601f1916602001820160405280156129c8576020820181803683370190505b5090505b8415612a33576129dd600183613503565b91506129ea600a8661359c565b6129f59060306134b8565b60f81b818381518110612a0a57612a0a6135f2565b60200101906001600160f81b031916908160001a905350612a2c600a866134d0565b94506129cc565b949350505050565b60606000612a4a8360026134e4565b612a559060026134b8565b67ffffffffffffffff811115612a6d57612a6d613608565b6040519080825280601f01601f191660200182016040528015612a97576020820181803683370190505b509050600360fc1b81600081518110612ab257612ab26135f2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ae157612ae16135f2565b60200101906001600160f81b031916908160001a9053506000612b058460026134e4565b612b109060016134b8565b90505b6001811115612b88576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612b4457612b446135f2565b1a60f81b828281518110612b5a57612b5a6135f2565b60200101906001600160f81b031916908160001a90535060049490941c93612b818161354a565b9050612b13565b508315612bd75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610712565b9392505050565b803b612c425760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610712565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612ce25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610712565b600080846001600160a01b031684604051612cfd9190613136565b600060405180830381855af49150503d8060008114612d38576040519150601f19603f3d011682016040523d82523d6000602084013e612d3d565b606091505b5091509150612d65828260405180606001604052806027815260200161366260279139612e18565b95945050505050565b612d7781612bde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612dc7575060005460ff16155b612de35760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff16158015611504576000805461ffff191661010117905580156107ef576000805461ff001916905550565b60608315612e27575081612bd7565b825115612e375782518084602001fd5b8160405162461bcd60e51b815260040161071291906132c4565b600060208284031215612e6357600080fd5b8135612bd78161361e565b60008060408385031215612e8157600080fd5b8235612e8c8161361e565b915060208381013567ffffffffffffffff80821115612eaa57600080fd5b818601915086601f830112612ebe57600080fd5b813581811115612ed057612ed0613608565b612ee2601f8201601f19168501613487565b91508082528784828501011115612ef857600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060208385031215612f2957600080fd5b823567ffffffffffffffff80821115612f4157600080fd5b818501915085601f830112612f5557600080fd5b813581811115612f6457600080fd5b86602060c083028501011115612f7957600080fd5b60209290920196919550909350505050565b600060208284031215612f9d57600080fd5b8151612bd781613633565b600060208284031215612fba57600080fd5b5035919050565b60008060408385031215612fd457600080fd5b823591506020830135612fe68161361e565b809150509250929050565b60006020828403121561300357600080fd5b81356001600160e01b031981168114612bd757600080fd5b6000806040838503121561302e57600080fd5b82356130398161361e565b946020939093013593505050565b600060c0828403121561305957600080fd5b60405160c0810181811067ffffffffffffffff8211171561307c5761307c613608565b604052823561308a8161361e565b8082525060208301356020820152604083013560408201526060830135606082015260808301356130ba81613633565b608082015260a08301356130cd81613633565b60a08201529392505050565b6000602082840312156130eb57600080fd5b5051919050565b80516001600160a01b0316825260208082015190830152604080820151908301526060808201519083015260808082015115159083015260a0908101511515910152565b6000825161314881846020870161351a565b9190910192915050565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b6020820152600083516131a881603585016020880161351a565b620101e160ed1b60359184019182015283516131cb81603884016020880161351a565b01603801949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161320f81601785016020880161351a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161324081602884016020880161351a565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b6020808252825182820181905260009190848201906040850190845b818110156132b8576132a58385516130f2565b9284019260c09290920191600101613292565b50909695505050505050565b60208152600082518060208401526132e381604085016020870161351a565b601f01601f19169190910160400192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60c081016105aa82846130f2565b604051601f8201601f1916810167ffffffffffffffff811182821017156134b0576134b0613608565b604052919050565b600082198211156134cb576134cb6135b0565b500190565b6000826134df576134df6135c6565b500490565b60008160001904831182151516156134fe576134fe6135b0565b500290565b600082821015613515576135156135b0565b500390565b60005b8381101561353557818101518382015260200161351d565b83811115613544576000848401525b50505050565b600081613559576135596135b0565b506000190190565b6000600019821415613575576135756135b0565b5060010190565b600060ff821660ff811415613593576135936135b0565b60010192915050565b6000826135ab576135ab6135c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107ef57600080fd5b80151581146107ef57600080fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ef5d87bd4ecd0108b58f789b178b8f319e654a8386be8bf1d3144ad1ae47c24464736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638129fc1c116100ec578063cb1468791161008a578063ed2a2f9d11610064578063ed2a2f9d146104ec578063f281d43814610503578063f3fef3a314610525578063f72c0d8b1461054557600080fd5b8063cb1468791461048c578063d547741f146104ac578063da909b09146104cc57600080fd5b8063a217fddf116100c6578063a217fddf1461042b578063b69ef8a814610440578063bd0f105314610455578063c6bbf4cb1461047757600080fd5b80638129fc1c1461039b5780638e6c8ab3146103b057806391d148541461040b57600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461031b57806359d57c1a1461032e5780636115640c1461034e57806375e8bdfa1461036e57600080fd5b80633659cfe6146102bb57806347e7ef24146102db5780634d12fca4146102fb57600080fd5b806301ffc9a7146101a157806306e73924146101d6578063248a9ca31461020357806329cb1bee146102415780632f2ff15d1461027957806336568abe1461029b575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612ff1565b610579565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004612e51565b6105b0565b6040516101cd9190613479565b34801561020f57600080fd5b5061023361021e366004612fa8565b60009081526065602052604090206001015490565b6040519081526020016101cd565b34801561024d57600080fd5b5060ff54610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101cd565b34801561028557600080fd5b50610299610294366004612fc1565b61067b565b005b3480156102a757600080fd5b506102996102b6366004612fc1565b6106a6565b3480156102c757600080fd5b506102996102d6366004612e51565b610729565b3480156102e757600080fd5b506102996102f636600461301b565b6107f2565b34801561030757600080fd5b5060fb54610261906001600160a01b031681565b610299610329366004612e6e565b610c7e565b34801561033a57600080fd5b50610299610349366004612e51565b610d34565b34801561035a57600080fd5b50610299610369366004612f16565b61110b565b34801561037a57600080fd5b50610233610389366004612e51565b60fd6020526000908152604090205481565b3480156103a757600080fd5b50610299611468565b3480156103bc57600080fd5b506103d06103cb366004612fa8565b611518565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c0016101cd565b34801561041757600080fd5b506101c1610426366004612fc1565b61156f565b34801561043757600080fd5b50610233600081565b34801561044c57600080fd5b5061029961159a565b34801561046157600080fd5b5061023360008051602061364283398151915281565b34801561048357600080fd5b506102996115cb565b34801561049857600080fd5b506102996104a7366004612e51565b611607565b3480156104b857600080fd5b506102996104c7366004612fc1565b6116a2565b3480156104d857600080fd5b506102996104e7366004612e51565b6116c8565b3480156104f857600080fd5b50610233620186a081565b34801561050f57600080fd5b506105186117a0565b6040516101cd9190613276565b34801561053157600080fd5b5061023361054036600461301b565b611849565b34801561055157600080fd5b506102337f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105aa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a083018290526001600160a01b038516825260fd9052919091205460fe8054909190811061060c5761060c6135f2565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015292915050565b6000828152606560205260409020600101546106978133611bc1565b6106a18383611bff565b505050565b6001600160a01b038116331461071b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107258282611c85565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107725760405162461bcd60e51b81526004016107129061332e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107a4611cec565b6001600160a01b0316146107ca5760405162461bcd60e51b81526004016107129061337a565b6107d381611d1a565b604080516000808252602082019092526107ef91839190611d45565b50565b61080a6000805160206136428339815191523361156f565b6108265760405162461bcd60e51b8152600401610712906132f7565b60ff546001600160a01b031661087a5760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b6044820152606401610712565b60fc546001600160a01b038381169116146108e65760405162461bcd60e51b815260206004820152602660248201527f504d3a204f6e6c792055534443206e6f7720617661696c61626c6520746f2064604482015265195c1bdcda5d60d21b6064820152608401610712565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561092a57600080fd5b505afa15801561093e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096291906130d9565b90508061096e57505050565b806000805b60fe5460ff82161015610aa65760fe8160ff1681548110610996576109966135f2565b600091825260209091206004600590920201015460ff166109b657610a94565b60fe8160ff16815481106109cc576109cc6135f2565b6000918252602091829020600590910201546040805163146ce76760e31b815290516001600160a01b039092169263a3673b3892600480840193829003018186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5291906130d9565b610a5c90846134b8565b925060fe8160ff1681548110610a7457610a746135f2565b90600052602060002090600502016002015482610a9191906134b8565b91505b80610a9e8161357c565b915050610973565b5060ff546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906130d9565b60ff54909150600090610b3f906001600160a01b03166105b0565b9050600083826060015186610b5491906134e4565b610b5e91906134d0565b905080610b6b87856134b8565b1015610c6c5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810189905291169063a9059cbb90604401602060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf99190612f8b565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810189905291169063adc9772e90604401600060405180830381600087803b158015610c4a57600080fd5b505af1158015610c5e573d6000803e3d6000fd5b505050505050505050505050565b610c74611e89565b5050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610cc75760405162461bcd60e51b81526004016107129061332e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cf9611cec565b6001600160a01b031614610d1f5760405162461bcd60e51b81526004016107129061337a565b610d2882611d1a565b61072582826001611d45565b610d3f60003361156f565b610d5b5760405162461bcd60e51b815260040161071290613414565b6001600160a01b038116610d815760405162461bcd60e51b815260040161071290613442565b60ff546001600160a01b0382811691161415610dd7576040516001600160a01b03821681527f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c906020015b60405180910390a150565b60ff546001600160a01b031615801590610ef95760ff54604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b158015610e3057600080fd5b505af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6891906130d9565b5060ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192610ea592911690600090309060019060040161324c565b602060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906130d9565b505b60ff80546001600160a01b0319166001600160a01b03841617905580156110cb5760fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9691906130d9565b905080156110c95760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190612f8b565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810184905291169063adc9772e90604401600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f816040516110c091815260200190565b60405180910390a15b505b6040516001600160a01b03831681527fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e39060200160405180910390a15050565b61111660003361156f565b6111325760405162461bcd60e51b815260040161071290613414565b6000805b60ff81168311156112c757600084848360ff16818110611158576111586135f2565b905060c0020180360381019061116e9190613047565b80519091506001600160a01b03166111c85760405162461bcd60e51b815260206004820152601760248201527f77656967687420776974686f75742073747261746567790000000000000000006044820152606401610712565b8060400151816020015111156112355760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b6064820152608401610712565b8060600151816040015111156112a25760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b6064820152608401610712565b60408101516112b190846134b8565b92505080806112bf9061357c565b915050611136565b50620186a0811461132c5760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b6064820152608401610712565b60005b60ff81168311156113cb5761137184848360ff16818110611352576113526135f2565b905060c002018036038101906113689190613047565b8260ff16611e94565b8060ff1660fd600060fe8460ff168154811061138f5761138f6135f2565b600091825260208083206005909202909101546001600160a01b03168352820192909252604001902055806113c38161357c565b91505061132f565b5060fe548210156106a15760fe546000906113e7908490613503565b905060005b818160ff1610156114615760fe805480611408576114086135dc565b60008281526020812060056000199093019283020180546001600160a01b031916815560018101829055600281018290556003810191909155600401805461ffff191690559055806114598161357c565b9150506113ec565b5050505050565b600054610100900460ff1680611481575060005460ff16155b61149d5760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff161580156114bf576000805461ffff19166101011790555b6114c761200c565b6114cf61207b565b6114da600033611bff565b6115047f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611bff565b80156107ef576000805461ff001916905550565b60fe818154811061152857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6115a560003361156f565b6115c15760405162461bcd60e51b815260040161071290613414565b6115c9611e89565b565b6115e36000805160206136428339815191523361156f565b6115ff5760405162461bcd60e51b8152600401610712906132f7565b6115c16120d9565b61161260003361156f565b61162e5760405162461bcd60e51b815260040161071290613414565b6001600160a01b0381166116545760405162461bcd60e51b815260040161071290613442565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f695697c154277ce40ee0efa7c478421fa81ae4802bc333c6a3425394285c20c890602001610dcc565b6000828152606560205260409020600101546116be8133611bc1565b6106a18383611c85565b6116d360003361156f565b6116ef5760405162461bcd60e51b815260040161071290613414565b6001600160a01b0381166117155760405162461bcd60e51b815260040161071290613442565b60fb5461173a90600080516020613642833981519152906001600160a01b03166116a2565b6117526000805160206136428339815191528261067b565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610dcc565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156118405760008481526020908190206040805160c0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015290835290920191016117c4565b50505050905090565b60006118636000805160206136428339815191523361156f565b61187f5760405162461bcd60e51b8152600401610712906132f7565b60ff546001600160a01b03166118d35760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b6044820152606401610712565b60fc546001600160a01b038481169116146119405760405162461bcd60e51b815260206004820152602760248201527f504d3a204f6e6c792055534443206e6f7720617661696c61626c6520746f20776044820152666974686472617760c81b6064820152608401610712565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a916004808301926020929190829003018186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd91906130d9565b905082811115611a5a5760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192611a02929116908790309060009060040161324c565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906130d9565b50611a64565b611a6484846121b0565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906130d9565b905083811015611b3157611af181612935565b611afa85612935565b604051602001611b0b929190613152565b60408051601f198184030181529082905262461bcd60e51b8252610712916004016132c4565b60fb5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529086169063a9059cbb90604401602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190612f8b565b5092949350505050565b611bcb828261156f565b61072557611be3816001600160a01b03166014612a3b565b611bee836020612a3b565b604051602001611b0b9291906131d7565b611c09828261156f565b6107255760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c8f828261156f565b156107255760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36107258133611bc1565b6000611d4f611cec565b9050611d5a84612bde565b600083511180611d675750815b15611d7857611d768484612c83565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661146157805460ff191660011781556040516001600160a01b0383166024820152611df790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612c83565b50805460ff19168155611e08611cec565b6001600160a01b0316826001600160a01b031614611e805760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610712565b61146185612d6e565b6115c96000806121b0565b60fe54801580611ead575081611eab600183613503565b105b15611efa576000611ebe8284613503565b611ec99060016134b8565b905060005b818160ff161015611ef75760fe8054600101815560005280611eef8161357c565b915050611ece565b50505b8260fe8381548110611f0e57611f0e6135f2565b600091825260209182902083516005929092020180546001600160a01b039283166001600160a01b0319909116178155838301516001820155604080850151600283015560608086015160038401556080808701516004909401805460a09889015115156101000261ff00199615159690961661ffff1990911617949094179093558851898601518a8401518b8401518c8701518d8b015187518e815295909916998501999099529483019190915291810191909152918201529115159282019290925290151560c08201527fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f29060e00160405180910390a1505050565b600054610100900460ff1680612025575060005460ff16155b6120415760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff16158015612063576000805461ffff19166101011790555b61206b612dae565b612073612dae565b611504612dae565b600054610100900460ff1680612094575060005460ff16155b6120b05760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff1615801561206b576000805461ffff1916610101179055612073612dae565b60006120e36117a0565b905060005b81518160ff161015610725576000828260ff168151811061210b5761210b6135f2565b602002602001015190508060a001511561219d578051604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b15801561216357600080fd5b505af1158015612177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219b91906130d9565b505b50806121a88161357c565b9150506120e8565b60006121ba6117a0565b60fc546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561220357600080fd5b505afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b91906130d9565b90506000805b83518160ff16101561243b57838160ff1681518110612262576122626135f2565b60200260200101516080015161227757612429565b838160ff168151811061228c5761228c6135f2565b6020026020010151604001516000141561235d57838160ff16815181106122b5576122b56135f2565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926122fa92911690600090309060019060040161324c565b602060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234c91906130d9565b61235690846134b8565b9250612429565b838160ff1681518110612372576123726135f2565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906130d9565b6123f890846134b8565b9250838160ff168151811061240f5761240f6135f2565b6020026020010151604001518261242691906134b8565b91505b806124338161357c565b915050612241565b5060fc546001600160a01b03868116911614156124c557838210156124b85760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b6064820152608401610712565b6124c28483613503565b91505b6000835167ffffffffffffffff8111156124e1576124e1613608565b60405190808252806020026020018201604052801561252c57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816124ff5790505b5090506000805b85518160ff1610156127d357858160ff1681518110612554576125546135f2565b602002602001015160800151612569576127c1565b6000868260ff1681518110612580576125806135f2565b6020026020010151604001516000141561259c575060006125d6565b84878360ff16815181106125b2576125b26135f2565b602002602001015160400151876125c991906134e4565b6125d391906134d0565b90505b6000878360ff16815181106125ed576125ed6135f2565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561263157600080fd5b505afa158015612645573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266991906130d9565b90508082141561267a5750506127c1565b8082101561273d57878360ff1681518110612697576126976135f2565b60209081029190910101515160fc546001600160a01b039182169163f6f6b88191166126c38585613503565b3060006040518563ffffffff1660e01b81526004016126e5949392919061324c565b602060405180830381600087803b1580156126ff57600080fd5b505af1158015612713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273791906130d9565b506127be565b6040518060600160405280600115158152602001898560ff1681518110612766576127666135f2565b6020026020010151600001516001600160a01b03168152602001828461278c9190613503565b815250858560ff16815181106127a4576127a46135f2565b602002602001018190525083806127ba9061357c565b9450505b50505b806127cb8161357c565b915050612533565b5060005b8160ff168160ff161015610c74576000838260ff16815181106127fc576127fc6135f2565b60200260200101516020015190506000848360ff1681518110612821576128216135f2565b602090810291909101015160409081015160fc54915163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905291935091169063a9059cbb90604401602060405180830381600087803b15801561288157600080fd5b505af1158015612895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b99190612f8b565b5060fc546040516356e4bb9760e11b81526001600160a01b039182166004820152602481018390529083169063adc9772e90604401600060405180830381600087803b15801561290857600080fd5b505af115801561291c573d6000803e3d6000fd5b505050505050808061292d9061357c565b9150506127d7565b6060816129595750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612983578061296d81613561565b915061297c9050600a836134d0565b915061295d565b60008167ffffffffffffffff81111561299e5761299e613608565b6040519080825280601f01601f1916602001820160405280156129c8576020820181803683370190505b5090505b8415612a33576129dd600183613503565b91506129ea600a8661359c565b6129f59060306134b8565b60f81b818381518110612a0a57612a0a6135f2565b60200101906001600160f81b031916908160001a905350612a2c600a866134d0565b94506129cc565b949350505050565b60606000612a4a8360026134e4565b612a559060026134b8565b67ffffffffffffffff811115612a6d57612a6d613608565b6040519080825280601f01601f191660200182016040528015612a97576020820181803683370190505b509050600360fc1b81600081518110612ab257612ab26135f2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ae157612ae16135f2565b60200101906001600160f81b031916908160001a9053506000612b058460026134e4565b612b109060016134b8565b90505b6001811115612b88576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612b4457612b446135f2565b1a60f81b828281518110612b5a57612b5a6135f2565b60200101906001600160f81b031916908160001a90535060049490941c93612b818161354a565b9050612b13565b508315612bd75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610712565b9392505050565b803b612c425760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610712565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612ce25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610712565b600080846001600160a01b031684604051612cfd9190613136565b600060405180830381855af49150503d8060008114612d38576040519150601f19603f3d011682016040523d82523d6000602084013e612d3d565b606091505b5091509150612d65828260405180606001604052806027815260200161366260279139612e18565b95945050505050565b612d7781612bde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612dc7575060005460ff16155b612de35760405162461bcd60e51b8152600401610712906133c6565b600054610100900460ff16158015611504576000805461ffff191661010117905580156107ef576000805461ff001916905550565b60608315612e27575081612bd7565b825115612e375782518084602001fd5b8160405162461bcd60e51b815260040161071291906132c4565b600060208284031215612e6357600080fd5b8135612bd78161361e565b60008060408385031215612e8157600080fd5b8235612e8c8161361e565b915060208381013567ffffffffffffffff80821115612eaa57600080fd5b818601915086601f830112612ebe57600080fd5b813581811115612ed057612ed0613608565b612ee2601f8201601f19168501613487565b91508082528784828501011115612ef857600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060208385031215612f2957600080fd5b823567ffffffffffffffff80821115612f4157600080fd5b818501915085601f830112612f5557600080fd5b813581811115612f6457600080fd5b86602060c083028501011115612f7957600080fd5b60209290920196919550909350505050565b600060208284031215612f9d57600080fd5b8151612bd781613633565b600060208284031215612fba57600080fd5b5035919050565b60008060408385031215612fd457600080fd5b823591506020830135612fe68161361e565b809150509250929050565b60006020828403121561300357600080fd5b81356001600160e01b031981168114612bd757600080fd5b6000806040838503121561302e57600080fd5b82356130398161361e565b946020939093013593505050565b600060c0828403121561305957600080fd5b60405160c0810181811067ffffffffffffffff8211171561307c5761307c613608565b604052823561308a8161361e565b8082525060208301356020820152604083013560408201526060830135606082015260808301356130ba81613633565b608082015260a08301356130cd81613633565b60a08201529392505050565b6000602082840312156130eb57600080fd5b5051919050565b80516001600160a01b0316825260208082015190830152604080820151908301526060808201519083015260808082015115159083015260a0908101511515910152565b6000825161314881846020870161351a565b9190910192915050565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b6020820152600083516131a881603585016020880161351a565b620101e160ed1b60359184019182015283516131cb81603884016020880161351a565b01603801949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161320f81601785016020880161351a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161324081602884016020880161351a565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b6020808252825182820181905260009190848201906040850190845b818110156132b8576132a58385516130f2565b9284019260c09290920191600101613292565b50909695505050505050565b60208152600082518060208401526132e381604085016020870161351a565b601f01601f19169190910160400192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60c081016105aa82846130f2565b604051601f8201601f1916810167ffffffffffffffff811182821017156134b0576134b0613608565b604052919050565b600082198211156134cb576134cb6135b0565b500190565b6000826134df576134df6135c6565b500490565b60008160001904831182151516156134fe576134fe6135b0565b500290565b600082821015613515576135156135b0565b500390565b60005b8381101561353557818101518382015260200161351d565b83811115613544576000848401525b50505050565b600081613559576135596135b0565b506000190190565b6000600019821415613575576135756135b0565b5060010190565b600060ff821660ff811415613593576135936135b0565b60010192915050565b6000826135ab576135ab6135c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107ef57600080fd5b80151581146107ef57600080fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ef5d87bd4ecd0108b58f789b178b8f319e654a8386be8bf1d3144ad1ae47c24464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 826,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2943,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3865,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13755,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "exchanger",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 13758,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "usdc",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 13762,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeightPositions",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13766,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeights",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_struct(StrategyWeight)21830_storage)dyn_storage"
      },
      {
        "astId": 13769,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "cashStrategy",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(IStrategy)21919"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StrategyWeight)21830_storage)dyn_storage": {
        "base": "t_struct(StrategyWeight)21830_storage",
        "encoding": "dynamic_array",
        "label": "struct IPortfolioManager.StrategyWeight[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)8922": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)21919": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyWeight)21830_storage": {
        "encoding": "inplace",
        "label": "struct IPortfolioManager.StrategyWeight",
        "members": [
          {
            "astId": 21819,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21821,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21823,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21825,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21827,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 21829,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabledReward",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}