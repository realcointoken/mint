{
  "address": "0xFDf56CF6d743a92D9196806b9028Ac3dBCE61f87",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "AssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyAlreadySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CashStrategyRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Exchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ExchangerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "Mark2MarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "name": "StrategyWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAndBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategyWeights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyWeight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m2m",
      "outputs": [
        {
          "internalType": "contract IMark2Market",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cashStrategy",
          "type": "address"
        }
      ],
      "name": "setCashStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_m2m",
          "type": "address"
        }
      ],
      "name": "setMark2Market",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "_strategyWeights",
          "type": "tuple[]"
        }
      ],
      "name": "setStrategyWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "b6874b8bab8af1be6d691d41cf7a32b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyAlreadySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CashStrategyRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ExchangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"Mark2MarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"name\":\"StrategyWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategyWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2m\",\"outputs\":[{\"internalType\":\"contract IMark2Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashStrategy\",\"type\":\"address\"}],\"name\":\"setCashStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m2m\",\"type\":\"address\"}],\"name\":\"setMark2Market\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"_strategyWeights\",\"type\":\"tuple[]\"}],\"name\":\"setStrategyWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioManager.sol\":\"PortfolioManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/PortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\ncontract PortfolioManager is IPortfolioManager, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    // ---  fields\\n\\n    address public exchanger;\\n    IERC20 asset;\\n    mapping(address => uint256) public strategyWeightPositions;\\n    StrategyWeight[] public strategyWeights;\\n    IStrategy public cashStrategy;\\n    IMark2Market public m2m;\\n\\n\\n    // ---  events\\n\\n    event ExchangerUpdated(address value);\\n    event Mark2MarketUpdated(address value);\\n    event AssetUpdated(address value);\\n    event CashStrategyAlreadySet(address value);\\n    event CashStrategyUpdated(address value);\\n    event CashStrategyRestaked(uint256 value);\\n    event Balance();\\n    event Exchanged(uint256 amount, address from, address to);\\n\\n    event StrategyWeightUpdated(\\n        uint256 index,\\n        address strategy,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight,\\n        bool enabled,\\n        bool enabledReward\\n    );\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier cashStrategySet() {\\n        require(address(cashStrategy) != address(0), \\\"Cash strategy not set yet\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  setters\\n\\n    function setExchanger(address _exchanger) public onlyAdmin {\\n        require(_exchanger != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(EXCHANGER, exchanger);\\n        grantRole(EXCHANGER, _exchanger);\\n\\n        exchanger = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    function setMark2Market(address _m2m) public onlyAdmin {\\n        require(_m2m != address(0), \\\"Zero address not allowed\\\");\\n\\n        m2m = IMark2Market(_m2m);\\n        emit Mark2MarketUpdated(_m2m);\\n    }\\n\\n\\n    function setAsset(address _asset) public onlyAdmin {\\n        require(_asset != address(0), \\\"Zero address not allowed\\\");\\n\\n        asset = IERC20(_asset);\\n        emit AssetUpdated(_asset);\\n    }\\n\\n    function setCashStrategy(address _cashStrategy) public onlyAdmin {\\n        require(_cashStrategy != address(0), \\\"Zero address not allowed\\\");\\n\\n        if (_cashStrategy == address(cashStrategy)) {\\n            emit CashStrategyAlreadySet(_cashStrategy);\\n            return;\\n        }\\n        bool needMoveCash = address(cashStrategy) != address(0);\\n        if (needMoveCash) {\\n            // unstake everything\\n            cashStrategy.unstake(\\n                address(asset),\\n                0,\\n                address(this),\\n                true\\n            );\\n        }\\n\\n        cashStrategy = IStrategy(_cashStrategy);\\n\\n        if (needMoveCash) {\\n            uint256 amount = asset.balanceOf(address(this));\\n            if (amount > 0) {\\n                asset.transfer(address(cashStrategy), amount);\\n                cashStrategy.stake(\\n                    address(asset),\\n                    amount\\n                );\\n                emit CashStrategyRestaked(amount);\\n            }\\n        }\\n\\n        emit CashStrategyUpdated(_cashStrategy);\\n    }\\n\\n\\n\\n    // ---  logic\\n\\n    function deposit(IERC20 _token, uint256 _amount) external override onlyExchanger cashStrategySet {\\n        require(address(_token) == address(asset), \\\"PM: Only asset available to deposit\\\");\\n\\n        // 1. get cashStrategy current asset amount\\n        // 2. get cashStrategy upper limit\\n        // 3. if _amount + current < limit then just stake to cash strategy\\n        // 4. else call _balance\\n\\n        uint256 pmAssetBalance = asset.balanceOf(address(this));\\n        if (pmAssetBalance == 0) {\\n            // zero asset amount always fit in cash strategy but also zero stake result\\n            // so we can return now\\n            return;\\n        }\\n\\n        uint256 totalAsset = pmAssetBalance;\\n        uint256 totalWeight = 0;\\n        for (uint8 i; i < strategyWeights.length; i++) {\\n            if (!strategyWeights[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n            totalAsset += IStrategy(strategyWeights[i].strategy).netAssetValue();\\n            totalWeight += strategyWeights[i].targetWeight;\\n        }\\n\\n        uint256 currentCashLiquidity = cashStrategy.netAssetValue();\\n        StrategyWeight memory cashStrategyWeight = getStrategyWeight(address(cashStrategy));\\n        //TODO: can be optimized by saving previous totalAsset gere and in balance\\n        uint256 maxCashLiquidity = (totalAsset * cashStrategyWeight.maxWeight) / totalWeight;\\n\\n        if (currentCashLiquidity + pmAssetBalance < maxCashLiquidity) {\\n            // we may add _amount to cash strategy without balancing\\n            asset.transfer(address(cashStrategy), pmAssetBalance);\\n            cashStrategy.stake(\\n                address(asset),\\n                pmAssetBalance\\n            );\\n            return;\\n        }\\n\\n        _balance();\\n    }\\n\\n\\n    function withdraw(IERC20 _token, uint256 _amount)\\n    external\\n    override\\n    onlyExchanger\\n    cashStrategySet\\n    returns (uint256) {\\n\\n        require(address(_token) == address(asset), \\\"PM: Only asset available to withdraw\\\");\\n\\n        // if cash strategy has enough liquidity then prevent balancing\\n        uint256 liquidationValue = cashStrategy.liquidationValue();\\n        if (liquidationValue > _amount) {\\n            cashStrategy.unstake(\\n                address(asset),\\n                _amount,\\n                address(this),\\n                false\\n            );\\n        } else {\\n            // balance to needed amount\\n            _balance(_token, _amount);\\n        }\\n\\n        uint256 currentBalance = _token.balanceOf(address(this));\\n\\n        // `if` is cheaper then `require` when need build complex message\\n        if (currentBalance < _amount) {\\n            revert(string(\\n                abi.encodePacked(\\n                    \\\"In portfolioManager not enough for transfer _amount: \\\",\\n                    Strings.toString(currentBalance),\\n                    \\\" < \\\",\\n                    Strings.toString(_amount)\\n                )\\n            ));\\n        }\\n\\n        // transfer back tokens\\n        _token.transfer(exchanger, _amount);\\n\\n        return _amount;\\n    }\\n\\n    function claimAndBalance() external override onlyExchanger {\\n        _claimRewards();\\n        _balance();\\n    }\\n\\n    function _claimRewards() internal {\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        for (uint8 i; i < strategies.length; i++) {\\n            StrategyWeight memory item = strategies[i];\\n\\n            if (item.enabledReward) {\\n                IStrategy(item.strategy).claimRewards(address(this));\\n            }\\n        }\\n    }\\n\\n    function balance() public override onlyPortfolioAgent {\\n        _balance();\\n        emit Balance();\\n    }\\n\\n    function _balance() internal {\\n        // Same to zero withdrawal balance\\n        _balance(IERC20(address(0)), 0);\\n    }\\n\\n    function _balance(IERC20 withdrawToken, uint256 withdrawAmount) internal {\\n\\n        // after balancing, we need to make sure that we did not lose money when:\\n        // 1) transferring from one strategy to another\\n        // 2) when execute stake/unstake\\n\\n        // allowable losses 0.04% = USD+ mint/redeem fee\\n        uint256 minNavExpected = OvnMath.subBasisPoints(m2m.totalNetAssets(), 4); //0.04%\\n        minNavExpected = minNavExpected - withdrawAmount; // subscribe withdraw amount\\n\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        // 1. calc total asset equivalent\\n        uint256 totalAsset = asset.balanceOf(address(this));\\n        uint256 totalWeight = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            // UnstakeFull from Strategies with targetWeight == 0\\n            if (strategies[i].targetWeight == 0) {\\n                totalAsset += IStrategy(strategies[i].strategy).unstake(\\n                    address(asset),\\n                    0,\\n                    address(this),\\n                    true\\n                );\\n            } else {\\n                totalAsset += IStrategy(strategies[i].strategy).netAssetValue();\\n                totalWeight += strategies[i].targetWeight;\\n            }\\n\\n        }\\n\\n        if (address(withdrawToken) == address(asset)) {\\n            require(totalAsset >= withdrawAmount, \\\"Trying withdraw more than liquidity available\\\");\\n            // it make to move to PortfolioManager extra asset to withdraw\\n            totalAsset = totalAsset - withdrawAmount;\\n        }\\n\\n        // 3. calc diffs for strategies liquidity\\n        Order[] memory stakeOrders = new Order[](strategies.length);\\n        uint8 stakeOrdersCount = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            uint256 targetLiquidity;\\n            if (strategies[i].targetWeight == 0) {\\n                targetLiquidity = 0;\\n            } else {\\n                targetLiquidity = (totalAsset * strategies[i].targetWeight) / totalWeight;\\n            }\\n\\n            uint256 currentLiquidity = IStrategy(strategies[i].strategy).netAssetValue();\\n            if (targetLiquidity == currentLiquidity) {\\n                // skip already at target strategies\\n                continue;\\n            }\\n\\n            if (targetLiquidity < currentLiquidity) {\\n                // unstake now\\n                IStrategy(strategies[i].strategy).unstake(\\n                    address(asset),\\n                    currentLiquidity - targetLiquidity,\\n                    address(this),\\n                    false\\n                );\\n            } else {\\n                // save to stake later\\n                stakeOrders[stakeOrdersCount] = Order(\\n                    true,\\n                    strategies[i].strategy,\\n                    targetLiquidity - currentLiquidity\\n                );\\n                stakeOrdersCount++;\\n            }\\n        }\\n\\n        // 4.  make staking\\n        for (uint8 i; i < stakeOrdersCount; i++) {\\n\\n            address strategy = stakeOrders[i].strategy;\\n            uint256 amount = stakeOrders[i].amount;\\n\\n            uint256 currentBalance = asset.balanceOf(address(this));\\n            if (currentBalance < amount) {\\n                amount = currentBalance;\\n            }\\n            asset.transfer(strategy, amount);\\n\\n            IStrategy(strategy).stake(\\n                address(asset),\\n                amount\\n            );\\n        }\\n\\n        require(m2m.totalNetAssets() >= minNavExpected, \\\"PM: NAV less than expected\\\");\\n\\n    }\\n\\n    function setStrategyWeights(StrategyWeight[] calldata _strategyWeights) external onlyPortfolioAgent {\\n\\n        require(_strategyWeights.length == strategyWeights.length, 'Wrong number of strategies');\\n\\n        uint256 totalTarget = 0;\\n\\n        bool[] memory updatedStrategies = new bool[](strategyWeights.length);\\n\\n        for (uint8 i = 0; i < _strategyWeights.length; i++) {\\n            StrategyWeight memory weightNew = _strategyWeights[i];\\n\\n            uint256 index = strategyWeightPositions[weightNew.strategy];\\n            require(updatedStrategies[index] != true, 'Strategy was updated');\\n\\n\\n            StrategyWeight memory weightOld = strategyWeights[index];\\n\\n            require(weightOld.strategy == weightNew.strategy, 'Incorrect strategy index');\\n            require(weightNew.minWeight <= weightNew.targetWeight, \\\"minWeight shouldn't higher than targetWeight\\\");\\n            require(weightNew.targetWeight <= weightNew.maxWeight, \\\"targetWeight shouldn't higher than maxWeight\\\");\\n\\n            totalTarget += weightNew.targetWeight;\\n\\n            strategyWeights[index] = weightNew;\\n\\n            updatedStrategies[index] = true;\\n\\n            emit StrategyWeightUpdated(\\n                index,\\n                weightNew.strategy,\\n                weightNew.minWeight,\\n                weightNew.targetWeight,\\n                weightNew.maxWeight,\\n                weightNew.enabled,\\n                weightNew.enabledReward\\n            );\\n        }\\n\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n    }\\n\\n    function addStrategy(address _strategy) external onlyAdmin {\\n\\n        for (uint8 i = 0; i < strategyWeights.length; i++) {\\n            require(strategyWeights[i].strategy != _strategy, 'Strategy already exist');\\n        }\\n\\n\\n        // Strategy is disabled always when only created\\n        StrategyWeight memory strategyWeight = StrategyWeight(_strategy, 0, 0, 0, false, false);\\n\\n        uint256 index; // default index = 0\\n        if(strategyWeights.length != 0){\\n            index = strategyWeights.length; // next index = length (+1)\\n        }\\n\\n        // Add strategy to last position\\n        _addStrategyWeightAt(strategyWeight, index);\\n        strategyWeightPositions[strategyWeight.strategy] = index;\\n    }\\n\\n    function removeStrategy(address _strategy) external onlyAdmin {\\n\\n        uint256 index = strategyWeightPositions[_strategy];\\n        StrategyWeight memory weight = strategyWeights[index];\\n\\n        require(weight.strategy == _strategy, 'Address strategy not equals');\\n        require(weight.targetWeight == 0, 'Target weight must be 0');\\n        require(IStrategy(weight.strategy).netAssetValue() == 0, 'Strategy nav must be 0');\\n\\n\\n        // Remove gap from array\\n        for (uint i = index; i < strategyWeights.length-1; i++){\\n\\n            StrategyWeight memory _tempWeight = strategyWeights[i+1];\\n\\n            strategyWeights[i] = _tempWeight;\\n            strategyWeightPositions[_tempWeight.strategy] = i;\\n        }\\n\\n        strategyWeights.pop();\\n        delete strategyWeightPositions[_strategy];\\n\\n    }\\n\\n\\n    function _addStrategyWeightAt(StrategyWeight memory strategyWeight, uint256 index) internal {\\n        uint256 currentLength = strategyWeights.length;\\n        // expand if need\\n        if (currentLength == 0 || currentLength - 1 < index) {\\n            uint256 additionalCount = index - currentLength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                strategyWeights.push();\\n            }\\n        }\\n        strategyWeights[index] = strategyWeight;\\n        emit StrategyWeightUpdated(\\n            index,\\n            strategyWeight.strategy,\\n            strategyWeight.minWeight,\\n            strategyWeight.targetWeight,\\n            strategyWeight.maxWeight,\\n            strategyWeight.enabled,\\n            strategyWeight.enabledReward\\n        );\\n    }\\n\\n\\n    function getStrategyWeight(address strategy) public override view returns (StrategyWeight memory) {\\n\\n        if (strategyWeights.length == 0) {\\n            revert('Strategy not found');\\n        }\\n\\n        StrategyWeight memory weight = strategyWeights[strategyWeightPositions[strategy]];\\n        require(weight.strategy == strategy, 'Strategy not found');\\n        return weight;\\n    }\\n\\n    function getAllStrategyWeights() public override view returns (StrategyWeight[] memory) {\\n        return strategyWeights;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xcd367ea40a743ef383432d94150d74e5dd41b654a15878abbb97be9977b380bc\",\"license\":\"MIT\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n\\n    struct StrategyAsset {\\n        address strategy;\\n        uint256 netAssetValue;\\n        uint256 liquidationValue;\\n    }\\n\\n    function strategyAssets() external view returns (StrategyAsset[] memory);\\n\\n    function totalNetAssets() external view returns (uint256);\\n\\n    function totalLiquidationAssets() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x97bf2a7d1d430d602aab42c73bbeb2014e2c7d1bce4290f1b62654fa837150ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    function deposit(IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external returns (uint256);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n\\n}\\n\",\"keccak256\":\"0x911aae88efe8cf1c259d1a873eff41cd2478100142999264e6d9cc3f3ddd837c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n    function healthFactorBalance() external;\\n\\n    function setHealthFactor(uint256 healthFactor) external;\\n}\\n\",\"keccak256\":\"0x4404caa3b9be9c213aee4babcb2957833ff90a1e300de1d2d7bd355859539d4e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200267c1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6142f86200018e60003960008181610e0c01528181610e4c015281816114180152818161145801526114e701526142f86000f3fe6080604052600436106101ee5760003560e01c80635dbd733a1161010d578063bd0f1053116100a0578063da909b091161006f578063da909b09146105e8578063ed2a2f9d14610608578063f281d4381461061f578063f3fef3a314610641578063f72c0d8b1461066157600080fd5b8063bd0f105314610571578063c6bbf4cb14610593578063d0d552dd146105a8578063d547741f146105c857600080fd5b80638e6c8ab3116100dc5780638e6c8ab3146104cc57806391d1485414610527578063a217fddf14610547578063b69ef8a81461055c57600080fd5b80635dbd733a146104365780636115640c1461046a57806375e8bdfa1461048a5780638129fc1c146104b757600080fd5b80633659cfe6116101855780634d12fca4116101545780634d12fca4146103ce5780634f1ef286146103ee57806352d1902d1461040157806359d57c1a1461041657600080fd5b80633659cfe61461034d578063370447711461036d5780633d92c38b1461038d57806347e7ef24146103ae57600080fd5b8063248a9ca3116101c1578063248a9ca31461029757806329cb1bee146102d55780632f2ff15d1461030d57806336568abe1461032d57600080fd5b806301ffc9a7146101f357806306e7392414610228578063175188e814610255578063223e547914610277575b600080fd5b3480156101ff57600080fd5b5061021361020e366004613c39565b610695565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610248610243366004613a80565b6106cc565b60405161021f919061405a565b34801561026157600080fd5b50610275610270366004613a80565b610829565b005b34801561028357600080fd5b50610275610292366004613a80565b610c1d565b3480156102a357600080fd5b506102c76102b2366004613bd7565b60009081526065602052604090206001015490565b60405190815260200161021f565b3480156102e157600080fd5b5060ff546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561031957600080fd5b50610275610328366004613c09565b610d59565b34801561033957600080fd5b50610275610348366004613c09565b610d83565b34801561035957600080fd5b50610275610368366004613a80565b610e01565b34801561037957600080fd5b50610275610388366004613a80565b610ee1565b34801561039957600080fd5b50610100546102f5906001600160a01b031681565b3480156103ba57600080fd5b506102756103c9366004613c63565b610f84565b3480156103da57600080fd5b5060fb546102f5906001600160a01b031681565b6102756103fc366004613a9d565b61140d565b34801561040d57600080fd5b506102c76114da565b34801561042257600080fd5b50610275610431366004613a80565b61158d565b34801561044257600080fd5b506102c77fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561047657600080fd5b50610275610485366004613b45565b6118df565b34801561049657600080fd5b506102c76104a5366004613a80565b60fd6020526000908152604090205481565b3480156104c357600080fd5b50610275611e0f565b3480156104d857600080fd5b506104ec6104e7366004613bd7565b611f56565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c00161021f565b34801561053357600080fd5b50610213610542366004613c09565b611fad565b34801561055357600080fd5b506102c7600081565b34801561056857600080fd5b50610275611fd8565b34801561057d57600080fd5b506102c760008051602061425c83398151915281565b34801561059f57600080fd5b50610275612081565b3480156105b457600080fd5b506102756105c3366004613a80565b6120c7565b3480156105d457600080fd5b506102756105e3366004613c09565b612162565b3480156105f457600080fd5b50610275610603366004613a80565b612187565b34801561061457600080fd5b506102c7620186a081565b34801561062b57600080fd5b5061063461225f565b60405161021f9190613ea5565b34801561064d57600080fd5b506102c761065c366004613c63565b612308565b34801561066d57600080fd5b506102c77f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806106c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260fe546107475760405162461bcd60e51b815260206004820152601260248201527114dd1c985d1959de481b9bdd08199bdd5b9960721b60448201526064015b60405180910390fd5b6001600160a01b038216600090815260fd602052604081205460fe805490919081106107755761077561420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a08301529092508416146106c65760405162461bcd60e51b815260206004820152601260248201527114dd1c985d1959de481b9bdd08199bdd5b9960721b604482015260640161073e565b610834600033611fad565b6108505760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b038116600090815260fd602052604081205460fe8054919291839081106108805761088061420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015290925084161461093f5760405162461bcd60e51b815260206004820152601b60248201527f41646472657373207374726174656779206e6f7420657175616c730000000000604482015260640161073e565b6040810151156109915760405162461bcd60e51b815260206004820152601760248201527f54617267657420776569676874206d7573742062652030000000000000000000604482015260640161073e565b80600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613bf0565b15610a4c5760405162461bcd60e51b815260206004820152601660248201527505374726174656779206e6176206d75737420626520360541b604482015260640161073e565b815b60fe54610a5d90600190614121565b811015610ba657600060fe610a738360016140d6565b81548110610a8357610a8361420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015260fe8054919250829184908110610b0557610b0561420c565b6000918252602080832084516005939093020180546001600160a01b0319166001600160a01b0393841617815584820151600182015560408086015160028301556060860151600383015560808601516004909201805460a09097015161ffff1990971692151561ff0019169290921761010096151596909602959095179055935116815260fd909252902081905580610b9e8161417b565b915050610a4e565b5060fe805480610bb857610bb86141f6565b6000828152602080822060056000199094019384020180546001600160a01b0319168155600181018390556002810183905560038101839055600401805461ffff19169055919092556001600160a01b0394909416815260fd90935250506040812055565b610c28600033611fad565b610c445760405162461bcd60e51b815260040161073e90613ff5565b60005b60fe5460ff82161015610ce757816001600160a01b031660fe8260ff1681548110610c7457610c7461420c565b60009182526020909120600590910201546001600160a01b03161415610cd55760405162461bcd60e51b815260206004820152601660248201527514dd1c985d1959de48185b1c9958591e48195e1a5cdd60521b604482015260640161073e565b80610cdf81614196565b915050610c47565b506040805160c0810182526001600160a01b0383168152600060208201819052918101829052606081018290526080810182905260a0810182905260fe5490919015610d32575060fe545b610d3c828261268b565b90516001600160a01b0316600090815260fd602052604090205550565b600082815260656020526040902060010154610d74816127e2565b610d7e83836127ec565b505050565b6001600160a01b0381163314610df35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073e565b610dfd8282612872565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e4a5760405162461bcd60e51b815260040161073e90613f5d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e9360008051602061427c833981519152546001600160a01b031690565b6001600160a01b031614610eb95760405162461bcd60e51b815260040161073e90613fa9565b610ec2816128d9565b60408051600080825260208201909252610ede91839190612903565b50565b610eec600033611fad565b610f085760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b038116610f2e5760405162461bcd60e51b815260040161073e90614023565b61010080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906020015b60405180910390a150565b610f9c60008051602061425c83398151915233611fad565b610fb85760405162461bcd60e51b815260040161073e90613f26565b60ff546001600160a01b031661100c5760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604482015260640161073e565b60fc546001600160a01b038381169116146110755760405162461bcd60e51b815260206004820152602360248201527f504d3a204f6e6c7920617373657420617661696c61626c6520746f206465706f6044820152621cda5d60ea1b606482015260840161073e565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190613bf0565b9050806110fd57505050565b806000805b60fe5460ff821610156112355760fe8160ff16815481106111255761112561420c565b600091825260209091206004600590920201015460ff1661114557611223565b60fe8160ff168154811061115b5761115b61420c565b6000918252602091829020600590910201546040805163146ce76760e31b815290516001600160a01b039092169263a3673b3892600480840193829003018186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190613bf0565b6111eb90846140d6565b925060fe8160ff16815481106112035761120361420c565b9060005260206000209060050201600201548261122091906140d6565b91505b8061122d81614196565b915050611102565b5060ff546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190613bf0565b60ff549091506000906112ce906001600160a01b03166106cc565b90506000838260600151866112e39190614102565b6112ed91906140ee565b9050806112fa87856140d6565b10156113fb5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810189905291169063a9059cbb90604401602060405180830381600087803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613bba565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810189905291169063adc9772e90604401600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050505050505050505050565b611403612a7d565b5050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114565760405162461bcd60e51b815260040161073e90613f5d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661149f60008051602061427c833981519152546001600160a01b031690565b6001600160a01b0316146114c55760405162461bcd60e51b815260040161073e90613fa9565b6114ce826128d9565b610dfd82826001612903565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461157a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161073e565b5060008051602061427c83398151915290565b611598600033611fad565b6115b45760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166115da5760405162461bcd60e51b815260040161073e90614023565b60ff546001600160a01b0382811691161415611629576040516001600160a01b03821681527f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c90602001610f79565b60ff546001600160a01b0316158015906116cd5760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192611679929116906000903090600190600401613e7b565b602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb9190613bf0565b505b60ff80546001600160a01b0319166001600160a01b038416179055801561189f5760fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190613bf0565b9050801561189d5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156117c257600080fd5b505af11580156117d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fa9190613bba565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810184905291169063adc9772e90604401600060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f8160405161189491815260200190565b60405180910390a15b505b6040516001600160a01b03831681527fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e39060200160405180910390a15050565b6119097fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733611fad565b6119555760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604482015260640161073e565b60fe5481146119a65760405162461bcd60e51b815260206004820152601a60248201527f57726f6e67206e756d626572206f662073747261746567696573000000000000604482015260640161073e565b60fe54600090819067ffffffffffffffff8111156119c6576119c6614222565b6040519080825280602002602001820160405280156119ef578160200160208202803683370190505b50905060005b60ff8116841115611da457600085858360ff16818110611a1757611a1761420c565b905060c00201803603810190611a2d9190613c8f565b80516001600160a01b0316600090815260fd6020526040902054845191925090849082908110611a5f57611a5f61420c565b60200260200101511515600115151415611ab25760405162461bcd60e51b815260206004820152601460248201527314dd1c985d1959de481dd85cc81d5c19185d195960621b604482015260640161073e565b600060fe8281548110611ac757611ac761420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015285519193501614611b875760405162461bcd60e51b815260206004820152601860248201527f496e636f727265637420737472617465677920696e6465780000000000000000604482015260640161073e565b826040015183602001511115611bf45760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b606482015260840161073e565b826060015183604001511115611c615760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b606482015260840161073e565b6040830151611c7090876140d6565b95508260fe8381548110611c8657611c8661420c565b600091825260209182902083516005929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600180830191909155604083015160028301556060830151600383015560808301516004909201805460a09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558551869084908110611d2157611d2161420c565b6020026020010190151590811515815250507fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f282846000015185602001518660400151876060015188608001518960a00151604051611d869796959493929190614068565b60405180910390a15050508080611d9c90614196565b9150506119f5565b50620186a08214611e095760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b606482015260840161073e565b50505050565b600054610100900460ff1615808015611e2f5750600054600160ff909116105b80611e495750303b158015611e49575060005460ff166001145b611eac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073e565b6000805460ff191660011790558015611ecf576000805461ff0019166101001790555b611ed7612a88565b611edf612a88565b611eea6000336127ec565b611f147f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336127ec565b8015610ede576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f79565b60fe8181548110611f6657600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6120027fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733611fad565b61204e5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604482015260640161073e565b612056612a7d565b6040517f0ef67887023bd7b8411cf35c89d19498bc1c980684932ef5f5b0559bfac80d9a90600090a1565b61209960008051602061425c83398151915233611fad565b6120b55760405162461bcd60e51b815260040161073e90613f26565b6120bd612af3565b6120c5612a7d565b565b6120d2600033611fad565b6120ee5760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166121145760405162461bcd60e51b815260040161073e90614023565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a90602001610f79565b60008281526065602052604090206001015461217d816127e2565b610d7e8383612872565b612192600033611fad565b6121ae5760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166121d45760405162461bcd60e51b815260040161073e90614023565b60fb546121f99060008051602061425c833981519152906001600160a01b0316612162565b61221160008051602061425c83398151915282610d59565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610f79565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156122ff5760008481526020908190206040805160c0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a08301529083529092019101612283565b50505050905090565b600061232260008051602061425c83398151915233611fad565b61233e5760405162461bcd60e51b815260040161073e90613f26565b60ff546001600160a01b03166123925760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604482015260640161073e565b60fc546001600160a01b038481169116146123fb5760405162461bcd60e51b8152602060048201526024808201527f504d3a204f6e6c7920617373657420617661696c61626c6520746f20776974686044820152636472617760e01b606482015260840161073e565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a916004808301926020929190829003018186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190613bf0565b9050828111156125155760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926124bd9291169087903090600090600401613e7b565b602060405180830381600087803b1580156124d757600080fd5b505af11580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250f9190613bf0565b5061251f565b61251f8484612bca565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561256157600080fd5b505afa158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190613bf0565b9050838110156125ec576125ac81613548565b6125b585613548565b6040516020016125c6929190613d81565b60408051601f198184030181529082905262461bcd60e51b825261073e91600401613ef3565b60fb5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529086169063a9059cbb90604401602060405180830381600087803b15801561263a57600080fd5b505af115801561264e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126729190613bba565b5092949350505050565b6001600160a01b03163b151590565b60fe548015806126a45750816126a2600183614121565b105b156126f15760006126b58284614121565b6126c09060016140d6565b905060005b818160ff1610156126ee5760fe80546001018155600052806126e681614196565b9150506126c5565b50505b8260fe83815481106127055761270561420c565b6000918252602091829020835160059092020180546001600160a01b039092166001600160a01b0319909216919091178155828201516001820155604080840151600283015560608085015160038401556080808601516004909401805460a09788015115156101000261ff00199615159690961661ffff1990911617949094179093558751938801518883015191890151938901519589015192517fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f2966127d5968a9690959394939092614068565b60405180910390a1505050565b610ede813361364e565b6127f68282611fad565b610dfd5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561282e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61287c8282611fad565b15610dfd5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610dfd816127e2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561293657610d7e8361368c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561296f57600080fd5b505afa92505050801561299f575060408051601f3d908101601f1916820190925261299c91810190613bf0565b60015b612a025760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161073e565b60008051602061427c8339815191528114612a715760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161073e565b50610d7e838383613728565b6120c5600080612bca565b600054610100900460ff166120c55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161073e565b6000612afd61225f565b905060005b81518160ff161015610dfd576000828260ff1681518110612b2557612b2561420c565b602002602001015190508060a0015115612bb7578051604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b158015612b7d57600080fd5b505af1158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190613bf0565b505b5080612bc281614196565b915050612b02565b6000612c5d61010060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c1e57600080fd5b505afa158015612c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c569190613bf0565b600461374d565b9050612c698282614121565b90506000612c7561225f565b60fc546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612cbe57600080fd5b505afa158015612cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf69190613bf0565b90506000805b83518160ff161015612ef657838160ff1681518110612d1d57612d1d61420c565b602002602001015160800151612d3257612ee4565b838160ff1681518110612d4757612d4761420c565b60200260200101516040015160001415612e1857838160ff1681518110612d7057612d7061420c565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192612db5929116906000903090600190600401613e7b565b602060405180830381600087803b158015612dcf57600080fd5b505af1158015612de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e079190613bf0565b612e1190846140d6565b9250612ee4565b838160ff1681518110612e2d57612e2d61420c565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7157600080fd5b505afa158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190613bf0565b612eb390846140d6565b9250838160ff1681518110612eca57612eca61420c565b60200260200101516040015182612ee191906140d6565b91505b80612eee81614196565b915050612cfc565b5060fc546001600160a01b0387811691161415612f805784821015612f735760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b606482015260840161073e565b612f7d8583614121565b91505b6000835167ffffffffffffffff811115612f9c57612f9c614222565b604051908082528060200260200182016040528015612fe757816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612fba5790505b5090506000805b85518160ff16101561328e57858160ff168151811061300f5761300f61420c565b6020026020010151608001516130245761327c565b6000868260ff168151811061303b5761303b61420c565b6020026020010151604001516000141561305757506000613091565b84878360ff168151811061306d5761306d61420c565b602002602001015160400151876130849190614102565b61308e91906140ee565b90505b6000878360ff16815181106130a8576130a861420c565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ec57600080fd5b505afa158015613100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131249190613bf0565b90508082141561313557505061327c565b808210156131f857878360ff16815181106131525761315261420c565b60209081029190910101515160fc546001600160a01b039182169163f6f6b881911661317e8585614121565b3060006040518563ffffffff1660e01b81526004016131a09493929190613e7b565b602060405180830381600087803b1580156131ba57600080fd5b505af11580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f29190613bf0565b50613279565b6040518060600160405280600115158152602001898560ff16815181106132215761322161420c565b6020026020010151600001516001600160a01b0316815260200182846132479190614121565b815250858560ff168151811061325f5761325f61420c565b6020026020010181905250838061327590614196565b9450505b50505b8061328681614196565b915050612fee565b5060005b8160ff168160ff16101561347c576000838260ff16815181106132b7576132b761420c565b60200260200101516020015190506000848360ff16815181106132dc576132dc61420c565b602090810291909101015160409081015160fc5491516370a0823160e01b81523060048201529092506000916001600160a01b0316906370a082319060240160206040518083038186803b15801561333357600080fd5b505afa158015613347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336b9190613bf0565b905081811015613379578091505b60fc5460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156133c757600080fd5b505af11580156133db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ff9190613bba565b5060fc546040516356e4bb9760e11b81526001600160a01b039182166004820152602481018490529084169063adc9772e90604401600060405180830381600087803b15801561344e57600080fd5b505af1158015613462573d6000803e3d6000fd5b50505050505050808061347490614196565b915050613292565b50610100546040805163890a8c4f60e01b8152905188926001600160a01b03169163890a8c4f916004808301926020929190829003018186803b1580156134c257600080fd5b505afa1580156134d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134fa9190613bf0565b10156114035760405162461bcd60e51b815260206004820152601a60248201527f504d3a204e4156206c657373207468616e206578706563746564000000000000604482015260640161073e565b60608161356c5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561359657806135808161417b565b915061358f9050600a836140ee565b9150613570565b60008167ffffffffffffffff8111156135b1576135b1614222565b6040519080825280601f01601f1916602001820160405280156135db576020820181803683370190505b5090505b8415613646576135f0600183614121565b91506135fd600a866141b6565b6136089060306140d6565b60f81b81838151811061361d5761361d61420c565b60200101906001600160f81b031916908160001a90535061363f600a866140ee565b94506135df565b949350505050565b6136588282611fad565b610dfd57613670816001600160a01b03166014613777565b61367b836020613777565b6040516020016125c6929190613e06565b6001600160a01b0381163b6136f95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161073e565b60008051602061427c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61373183613913565b60008251118061373e5750805b15610d7e57611e098383613953565b600061271061375c8382614121565b6137669085614102565b61377091906140ee565b9392505050565b60606000613786836002614102565b6137919060026140d6565b67ffffffffffffffff8111156137a9576137a9614222565b6040519080825280601f01601f1916602001820160405280156137d3576020820181803683370190505b509050600360fc1b816000815181106137ee576137ee61420c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061381d5761381d61420c565b60200101906001600160f81b031916908160001a9053506000613841846002614102565b61384c9060016140d6565b90505b60018111156138c4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106138805761388061420c565b1a60f81b8282815181106138965761389661420c565b60200101906001600160f81b031916908160001a90535060049490941c936138bd81614164565b905061384f565b5083156137705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073e565b61391c8161368c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6139bb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161073e565b600080846001600160a01b0316846040516139d69190613d65565b600060405180830381855af49150503d8060008114613a11576040519150601f19603f3d011682016040523d82523d6000602084013e613a16565b606091505b5091509150613a3e828260405180606001604052806027815260200161429c60279139613a47565b95945050505050565b60608315613a56575081613770565b825115613a665782518084602001fd5b8160405162461bcd60e51b815260040161073e9190613ef3565b600060208284031215613a9257600080fd5b813561377081614238565b60008060408385031215613ab057600080fd5b8235613abb81614238565b915060208381013567ffffffffffffffff80821115613ad957600080fd5b818601915086601f830112613aed57600080fd5b813581811115613aff57613aff614222565b613b11601f8201601f191685016140a5565b91508082528784828501011115613b2757600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060208385031215613b5857600080fd5b823567ffffffffffffffff80821115613b7057600080fd5b818501915085601f830112613b8457600080fd5b813581811115613b9357600080fd5b86602060c083028501011115613ba857600080fd5b60209290920196919550909350505050565b600060208284031215613bcc57600080fd5b81516137708161424d565b600060208284031215613be957600080fd5b5035919050565b600060208284031215613c0257600080fd5b5051919050565b60008060408385031215613c1c57600080fd5b823591506020830135613c2e81614238565b809150509250929050565b600060208284031215613c4b57600080fd5b81356001600160e01b03198116811461377057600080fd5b60008060408385031215613c7657600080fd5b8235613c8181614238565b946020939093013593505050565b600060c08284031215613ca157600080fd5b60405160c0810181811067ffffffffffffffff82111715613cc457613cc4614222565b6040528235613cd281614238565b808252506020830135602082015260408301356040820152606083013560608201526080830135613d028161424d565b608082015260a0830135613d158161424d565b60a08201529392505050565b80516001600160a01b0316825260208082015190830152604080820151908301526060808201519083015260808082015115159083015260a0908101511515910152565b60008251613d77818460208701614138565b9190910192915050565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b602082015260008351613dd7816035850160208801614138565b620101e160ed1b6035918401918201528351613dfa816038840160208801614138565b01603801949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e3e816017850160208801614138565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613e6f816028840160208801614138565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b6020808252825182820181905260009190848201906040850190845b81811015613ee757613ed4838551613d21565b9284019260c09290920191600101613ec1565b50909695505050505050565b6020815260008251806020840152613f12816040850160208701614138565b601f01601f19169190910160400192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60c081016106c68284613d21565b9687526001600160a01b03959095166020870152604086019390935260608501919091526080840152151560a0830152151560c082015260e00190565b604051601f8201601f1916810167ffffffffffffffff811182821017156140ce576140ce614222565b604052919050565b600082198211156140e9576140e96141ca565b500190565b6000826140fd576140fd6141e0565b500490565b600081600019048311821515161561411c5761411c6141ca565b500290565b600082821015614133576141336141ca565b500390565b60005b8381101561415357818101518382015260200161413b565b83811115611e095750506000910152565b600081614173576141736141ca565b506000190190565b600060001982141561418f5761418f6141ca565b5060010190565b600060ff821660ff8114156141ad576141ad6141ca565b60010192915050565b6000826141c5576141c56141e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ede57600080fd5b8015158114610ede57600080fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df0f12730a928a4962fe43a16f6eeadd2e4115f67e5bb27844e950bf690db59f64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80635dbd733a1161010d578063bd0f1053116100a0578063da909b091161006f578063da909b09146105e8578063ed2a2f9d14610608578063f281d4381461061f578063f3fef3a314610641578063f72c0d8b1461066157600080fd5b8063bd0f105314610571578063c6bbf4cb14610593578063d0d552dd146105a8578063d547741f146105c857600080fd5b80638e6c8ab3116100dc5780638e6c8ab3146104cc57806391d1485414610527578063a217fddf14610547578063b69ef8a81461055c57600080fd5b80635dbd733a146104365780636115640c1461046a57806375e8bdfa1461048a5780638129fc1c146104b757600080fd5b80633659cfe6116101855780634d12fca4116101545780634d12fca4146103ce5780634f1ef286146103ee57806352d1902d1461040157806359d57c1a1461041657600080fd5b80633659cfe61461034d578063370447711461036d5780633d92c38b1461038d57806347e7ef24146103ae57600080fd5b8063248a9ca3116101c1578063248a9ca31461029757806329cb1bee146102d55780632f2ff15d1461030d57806336568abe1461032d57600080fd5b806301ffc9a7146101f357806306e7392414610228578063175188e814610255578063223e547914610277575b600080fd5b3480156101ff57600080fd5b5061021361020e366004613c39565b610695565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610248610243366004613a80565b6106cc565b60405161021f919061405a565b34801561026157600080fd5b50610275610270366004613a80565b610829565b005b34801561028357600080fd5b50610275610292366004613a80565b610c1d565b3480156102a357600080fd5b506102c76102b2366004613bd7565b60009081526065602052604090206001015490565b60405190815260200161021f565b3480156102e157600080fd5b5060ff546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561031957600080fd5b50610275610328366004613c09565b610d59565b34801561033957600080fd5b50610275610348366004613c09565b610d83565b34801561035957600080fd5b50610275610368366004613a80565b610e01565b34801561037957600080fd5b50610275610388366004613a80565b610ee1565b34801561039957600080fd5b50610100546102f5906001600160a01b031681565b3480156103ba57600080fd5b506102756103c9366004613c63565b610f84565b3480156103da57600080fd5b5060fb546102f5906001600160a01b031681565b6102756103fc366004613a9d565b61140d565b34801561040d57600080fd5b506102c76114da565b34801561042257600080fd5b50610275610431366004613a80565b61158d565b34801561044257600080fd5b506102c77fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561047657600080fd5b50610275610485366004613b45565b6118df565b34801561049657600080fd5b506102c76104a5366004613a80565b60fd6020526000908152604090205481565b3480156104c357600080fd5b50610275611e0f565b3480156104d857600080fd5b506104ec6104e7366004613bd7565b611f56565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c00161021f565b34801561053357600080fd5b50610213610542366004613c09565b611fad565b34801561055357600080fd5b506102c7600081565b34801561056857600080fd5b50610275611fd8565b34801561057d57600080fd5b506102c760008051602061425c83398151915281565b34801561059f57600080fd5b50610275612081565b3480156105b457600080fd5b506102756105c3366004613a80565b6120c7565b3480156105d457600080fd5b506102756105e3366004613c09565b612162565b3480156105f457600080fd5b50610275610603366004613a80565b612187565b34801561061457600080fd5b506102c7620186a081565b34801561062b57600080fd5b5061063461225f565b60405161021f9190613ea5565b34801561064d57600080fd5b506102c761065c366004613c63565b612308565b34801561066d57600080fd5b506102c77f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806106c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260fe546107475760405162461bcd60e51b815260206004820152601260248201527114dd1c985d1959de481b9bdd08199bdd5b9960721b60448201526064015b60405180910390fd5b6001600160a01b038216600090815260fd602052604081205460fe805490919081106107755761077561420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a08301529092508416146106c65760405162461bcd60e51b815260206004820152601260248201527114dd1c985d1959de481b9bdd08199bdd5b9960721b604482015260640161073e565b610834600033611fad565b6108505760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b038116600090815260fd602052604081205460fe8054919291839081106108805761088061420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015290925084161461093f5760405162461bcd60e51b815260206004820152601b60248201527f41646472657373207374726174656779206e6f7420657175616c730000000000604482015260640161073e565b6040810151156109915760405162461bcd60e51b815260206004820152601760248201527f54617267657420776569676874206d7573742062652030000000000000000000604482015260640161073e565b80600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613bf0565b15610a4c5760405162461bcd60e51b815260206004820152601660248201527505374726174656779206e6176206d75737420626520360541b604482015260640161073e565b815b60fe54610a5d90600190614121565b811015610ba657600060fe610a738360016140d6565b81548110610a8357610a8361420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015260fe8054919250829184908110610b0557610b0561420c565b6000918252602080832084516005939093020180546001600160a01b0319166001600160a01b0393841617815584820151600182015560408086015160028301556060860151600383015560808601516004909201805460a09097015161ffff1990971692151561ff0019169290921761010096151596909602959095179055935116815260fd909252902081905580610b9e8161417b565b915050610a4e565b5060fe805480610bb857610bb86141f6565b6000828152602080822060056000199094019384020180546001600160a01b0319168155600181018390556002810183905560038101839055600401805461ffff19169055919092556001600160a01b0394909416815260fd90935250506040812055565b610c28600033611fad565b610c445760405162461bcd60e51b815260040161073e90613ff5565b60005b60fe5460ff82161015610ce757816001600160a01b031660fe8260ff1681548110610c7457610c7461420c565b60009182526020909120600590910201546001600160a01b03161415610cd55760405162461bcd60e51b815260206004820152601660248201527514dd1c985d1959de48185b1c9958591e48195e1a5cdd60521b604482015260640161073e565b80610cdf81614196565b915050610c47565b506040805160c0810182526001600160a01b0383168152600060208201819052918101829052606081018290526080810182905260a0810182905260fe5490919015610d32575060fe545b610d3c828261268b565b90516001600160a01b0316600090815260fd602052604090205550565b600082815260656020526040902060010154610d74816127e2565b610d7e83836127ec565b505050565b6001600160a01b0381163314610df35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073e565b610dfd8282612872565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e4a5760405162461bcd60e51b815260040161073e90613f5d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e9360008051602061427c833981519152546001600160a01b031690565b6001600160a01b031614610eb95760405162461bcd60e51b815260040161073e90613fa9565b610ec2816128d9565b60408051600080825260208201909252610ede91839190612903565b50565b610eec600033611fad565b610f085760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b038116610f2e5760405162461bcd60e51b815260040161073e90614023565b61010080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906020015b60405180910390a150565b610f9c60008051602061425c83398151915233611fad565b610fb85760405162461bcd60e51b815260040161073e90613f26565b60ff546001600160a01b031661100c5760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604482015260640161073e565b60fc546001600160a01b038381169116146110755760405162461bcd60e51b815260206004820152602360248201527f504d3a204f6e6c7920617373657420617661696c61626c6520746f206465706f6044820152621cda5d60ea1b606482015260840161073e565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190613bf0565b9050806110fd57505050565b806000805b60fe5460ff821610156112355760fe8160ff16815481106111255761112561420c565b600091825260209091206004600590920201015460ff1661114557611223565b60fe8160ff168154811061115b5761115b61420c565b6000918252602091829020600590910201546040805163146ce76760e31b815290516001600160a01b039092169263a3673b3892600480840193829003018186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190613bf0565b6111eb90846140d6565b925060fe8160ff16815481106112035761120361420c565b9060005260206000209060050201600201548261122091906140d6565b91505b8061122d81614196565b915050611102565b5060ff546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190613bf0565b60ff549091506000906112ce906001600160a01b03166106cc565b90506000838260600151866112e39190614102565b6112ed91906140ee565b9050806112fa87856140d6565b10156113fb5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810189905291169063a9059cbb90604401602060405180830381600087803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613bba565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810189905291169063adc9772e90604401600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050505050505050505050565b611403612a7d565b5050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114565760405162461bcd60e51b815260040161073e90613f5d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661149f60008051602061427c833981519152546001600160a01b031690565b6001600160a01b0316146114c55760405162461bcd60e51b815260040161073e90613fa9565b6114ce826128d9565b610dfd82826001612903565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461157a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161073e565b5060008051602061427c83398151915290565b611598600033611fad565b6115b45760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166115da5760405162461bcd60e51b815260040161073e90614023565b60ff546001600160a01b0382811691161415611629576040516001600160a01b03821681527f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c90602001610f79565b60ff546001600160a01b0316158015906116cd5760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192611679929116906000903090600190600401613e7b565b602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb9190613bf0565b505b60ff80546001600160a01b0319166001600160a01b038416179055801561189f5760fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190613bf0565b9050801561189d5760fc5460ff5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156117c257600080fd5b505af11580156117d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fa9190613bba565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b0391821660048201526024810184905291169063adc9772e90604401600060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f8160405161189491815260200190565b60405180910390a15b505b6040516001600160a01b03831681527fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e39060200160405180910390a15050565b6119097fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733611fad565b6119555760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604482015260640161073e565b60fe5481146119a65760405162461bcd60e51b815260206004820152601a60248201527f57726f6e67206e756d626572206f662073747261746567696573000000000000604482015260640161073e565b60fe54600090819067ffffffffffffffff8111156119c6576119c6614222565b6040519080825280602002602001820160405280156119ef578160200160208202803683370190505b50905060005b60ff8116841115611da457600085858360ff16818110611a1757611a1761420c565b905060c00201803603810190611a2d9190613c8f565b80516001600160a01b0316600090815260fd6020526040902054845191925090849082908110611a5f57611a5f61420c565b60200260200101511515600115151415611ab25760405162461bcd60e51b815260206004820152601460248201527314dd1c985d1959de481dd85cc81d5c19185d195960621b604482015260640161073e565b600060fe8281548110611ac757611ac761420c565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a083015285519193501614611b875760405162461bcd60e51b815260206004820152601860248201527f496e636f727265637420737472617465677920696e6465780000000000000000604482015260640161073e565b826040015183602001511115611bf45760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b606482015260840161073e565b826060015183604001511115611c615760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b606482015260840161073e565b6040830151611c7090876140d6565b95508260fe8381548110611c8657611c8661420c565b600091825260209182902083516005929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600180830191909155604083015160028301556060830151600383015560808301516004909201805460a09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558551869084908110611d2157611d2161420c565b6020026020010190151590811515815250507fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f282846000015185602001518660400151876060015188608001518960a00151604051611d869796959493929190614068565b60405180910390a15050508080611d9c90614196565b9150506119f5565b50620186a08214611e095760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b606482015260840161073e565b50505050565b600054610100900460ff1615808015611e2f5750600054600160ff909116105b80611e495750303b158015611e49575060005460ff166001145b611eac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073e565b6000805460ff191660011790558015611ecf576000805461ff0019166101001790555b611ed7612a88565b611edf612a88565b611eea6000336127ec565b611f147f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336127ec565b8015610ede576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f79565b60fe8181548110611f6657600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6120027fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733611fad565b61204e5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604482015260640161073e565b612056612a7d565b6040517f0ef67887023bd7b8411cf35c89d19498bc1c980684932ef5f5b0559bfac80d9a90600090a1565b61209960008051602061425c83398151915233611fad565b6120b55760405162461bcd60e51b815260040161073e90613f26565b6120bd612af3565b6120c5612a7d565b565b6120d2600033611fad565b6120ee5760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166121145760405162461bcd60e51b815260040161073e90614023565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a90602001610f79565b60008281526065602052604090206001015461217d816127e2565b610d7e8383612872565b612192600033611fad565b6121ae5760405162461bcd60e51b815260040161073e90613ff5565b6001600160a01b0381166121d45760405162461bcd60e51b815260040161073e90614023565b60fb546121f99060008051602061425c833981519152906001600160a01b0316612162565b61221160008051602061425c83398151915282610d59565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610f79565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156122ff5760008481526020908190206040805160c0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff8082161515608085015261010090910416151560a08301529083529092019101612283565b50505050905090565b600061232260008051602061425c83398151915233611fad565b61233e5760405162461bcd60e51b815260040161073e90613f26565b60ff546001600160a01b03166123925760405162461bcd60e51b815260206004820152601960248201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604482015260640161073e565b60fc546001600160a01b038481169116146123fb5760405162461bcd60e51b8152602060048201526024808201527f504d3a204f6e6c7920617373657420617661696c61626c6520746f20776974686044820152636472617760e01b606482015260840161073e565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a916004808301926020929190829003018186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190613bf0565b9050828111156125155760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926124bd9291169087903090600090600401613e7b565b602060405180830381600087803b1580156124d757600080fd5b505af11580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250f9190613bf0565b5061251f565b61251f8484612bca565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561256157600080fd5b505afa158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190613bf0565b9050838110156125ec576125ac81613548565b6125b585613548565b6040516020016125c6929190613d81565b60408051601f198184030181529082905262461bcd60e51b825261073e91600401613ef3565b60fb5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529086169063a9059cbb90604401602060405180830381600087803b15801561263a57600080fd5b505af115801561264e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126729190613bba565b5092949350505050565b6001600160a01b03163b151590565b60fe548015806126a45750816126a2600183614121565b105b156126f15760006126b58284614121565b6126c09060016140d6565b905060005b818160ff1610156126ee5760fe80546001018155600052806126e681614196565b9150506126c5565b50505b8260fe83815481106127055761270561420c565b6000918252602091829020835160059092020180546001600160a01b039092166001600160a01b0319909216919091178155828201516001820155604080840151600283015560608085015160038401556080808601516004909401805460a09788015115156101000261ff00199615159690961661ffff1990911617949094179093558751938801518883015191890151938901519589015192517fd94cc62d90f129d20553201fe591ba953b840f15c77827e542b9810e444161f2966127d5968a9690959394939092614068565b60405180910390a1505050565b610ede813361364e565b6127f68282611fad565b610dfd5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561282e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61287c8282611fad565b15610dfd5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610dfd816127e2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561293657610d7e8361368c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561296f57600080fd5b505afa92505050801561299f575060408051601f3d908101601f1916820190925261299c91810190613bf0565b60015b612a025760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161073e565b60008051602061427c8339815191528114612a715760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161073e565b50610d7e838383613728565b6120c5600080612bca565b600054610100900460ff166120c55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161073e565b6000612afd61225f565b905060005b81518160ff161015610dfd576000828260ff1681518110612b2557612b2561420c565b602002602001015190508060a0015115612bb7578051604051633bd73ee360e21b81523060048201526001600160a01b039091169063ef5cfb8c90602401602060405180830381600087803b158015612b7d57600080fd5b505af1158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190613bf0565b505b5080612bc281614196565b915050612b02565b6000612c5d61010060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c1e57600080fd5b505afa158015612c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c569190613bf0565b600461374d565b9050612c698282614121565b90506000612c7561225f565b60fc546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612cbe57600080fd5b505afa158015612cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf69190613bf0565b90506000805b83518160ff161015612ef657838160ff1681518110612d1d57612d1d61420c565b602002602001015160800151612d3257612ee4565b838160ff1681518110612d4757612d4761420c565b60200260200101516040015160001415612e1857838160ff1681518110612d7057612d7061420c565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192612db5929116906000903090600190600401613e7b565b602060405180830381600087803b158015612dcf57600080fd5b505af1158015612de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e079190613bf0565b612e1190846140d6565b9250612ee4565b838160ff1681518110612e2d57612e2d61420c565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7157600080fd5b505afa158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190613bf0565b612eb390846140d6565b9250838160ff1681518110612eca57612eca61420c565b60200260200101516040015182612ee191906140d6565b91505b80612eee81614196565b915050612cfc565b5060fc546001600160a01b0387811691161415612f805784821015612f735760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b606482015260840161073e565b612f7d8583614121565b91505b6000835167ffffffffffffffff811115612f9c57612f9c614222565b604051908082528060200260200182016040528015612fe757816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612fba5790505b5090506000805b85518160ff16101561328e57858160ff168151811061300f5761300f61420c565b6020026020010151608001516130245761327c565b6000868260ff168151811061303b5761303b61420c565b6020026020010151604001516000141561305757506000613091565b84878360ff168151811061306d5761306d61420c565b602002602001015160400151876130849190614102565b61308e91906140ee565b90505b6000878360ff16815181106130a8576130a861420c565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ec57600080fd5b505afa158015613100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131249190613bf0565b90508082141561313557505061327c565b808210156131f857878360ff16815181106131525761315261420c565b60209081029190910101515160fc546001600160a01b039182169163f6f6b881911661317e8585614121565b3060006040518563ffffffff1660e01b81526004016131a09493929190613e7b565b602060405180830381600087803b1580156131ba57600080fd5b505af11580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f29190613bf0565b50613279565b6040518060600160405280600115158152602001898560ff16815181106132215761322161420c565b6020026020010151600001516001600160a01b0316815260200182846132479190614121565b815250858560ff168151811061325f5761325f61420c565b6020026020010181905250838061327590614196565b9450505b50505b8061328681614196565b915050612fee565b5060005b8160ff168160ff16101561347c576000838260ff16815181106132b7576132b761420c565b60200260200101516020015190506000848360ff16815181106132dc576132dc61420c565b602090810291909101015160409081015160fc5491516370a0823160e01b81523060048201529092506000916001600160a01b0316906370a082319060240160206040518083038186803b15801561333357600080fd5b505afa158015613347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336b9190613bf0565b905081811015613379578091505b60fc5460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156133c757600080fd5b505af11580156133db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ff9190613bba565b5060fc546040516356e4bb9760e11b81526001600160a01b039182166004820152602481018490529084169063adc9772e90604401600060405180830381600087803b15801561344e57600080fd5b505af1158015613462573d6000803e3d6000fd5b50505050505050808061347490614196565b915050613292565b50610100546040805163890a8c4f60e01b8152905188926001600160a01b03169163890a8c4f916004808301926020929190829003018186803b1580156134c257600080fd5b505afa1580156134d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134fa9190613bf0565b10156114035760405162461bcd60e51b815260206004820152601a60248201527f504d3a204e4156206c657373207468616e206578706563746564000000000000604482015260640161073e565b60608161356c5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561359657806135808161417b565b915061358f9050600a836140ee565b9150613570565b60008167ffffffffffffffff8111156135b1576135b1614222565b6040519080825280601f01601f1916602001820160405280156135db576020820181803683370190505b5090505b8415613646576135f0600183614121565b91506135fd600a866141b6565b6136089060306140d6565b60f81b81838151811061361d5761361d61420c565b60200101906001600160f81b031916908160001a90535061363f600a866140ee565b94506135df565b949350505050565b6136588282611fad565b610dfd57613670816001600160a01b03166014613777565b61367b836020613777565b6040516020016125c6929190613e06565b6001600160a01b0381163b6136f95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161073e565b60008051602061427c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61373183613913565b60008251118061373e5750805b15610d7e57611e098383613953565b600061271061375c8382614121565b6137669085614102565b61377091906140ee565b9392505050565b60606000613786836002614102565b6137919060026140d6565b67ffffffffffffffff8111156137a9576137a9614222565b6040519080825280601f01601f1916602001820160405280156137d3576020820181803683370190505b509050600360fc1b816000815181106137ee576137ee61420c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061381d5761381d61420c565b60200101906001600160f81b031916908160001a9053506000613841846002614102565b61384c9060016140d6565b90505b60018111156138c4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106138805761388061420c565b1a60f81b8282815181106138965761389661420c565b60200101906001600160f81b031916908160001a90535060049490941c936138bd81614164565b905061384f565b5083156137705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073e565b61391c8161368c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6139bb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161073e565b600080846001600160a01b0316846040516139d69190613d65565b600060405180830381855af49150503d8060008114613a11576040519150601f19603f3d011682016040523d82523d6000602084013e613a16565b606091505b5091509150613a3e828260405180606001604052806027815260200161429c60279139613a47565b95945050505050565b60608315613a56575081613770565b825115613a665782518084602001fd5b8160405162461bcd60e51b815260040161073e9190613ef3565b600060208284031215613a9257600080fd5b813561377081614238565b60008060408385031215613ab057600080fd5b8235613abb81614238565b915060208381013567ffffffffffffffff80821115613ad957600080fd5b818601915086601f830112613aed57600080fd5b813581811115613aff57613aff614222565b613b11601f8201601f191685016140a5565b91508082528784828501011115613b2757600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060208385031215613b5857600080fd5b823567ffffffffffffffff80821115613b7057600080fd5b818501915085601f830112613b8457600080fd5b813581811115613b9357600080fd5b86602060c083028501011115613ba857600080fd5b60209290920196919550909350505050565b600060208284031215613bcc57600080fd5b81516137708161424d565b600060208284031215613be957600080fd5b5035919050565b600060208284031215613c0257600080fd5b5051919050565b60008060408385031215613c1c57600080fd5b823591506020830135613c2e81614238565b809150509250929050565b600060208284031215613c4b57600080fd5b81356001600160e01b03198116811461377057600080fd5b60008060408385031215613c7657600080fd5b8235613c8181614238565b946020939093013593505050565b600060c08284031215613ca157600080fd5b60405160c0810181811067ffffffffffffffff82111715613cc457613cc4614222565b6040528235613cd281614238565b808252506020830135602082015260408301356040820152606083013560608201526080830135613d028161424d565b608082015260a0830135613d158161424d565b60a08201529392505050565b80516001600160a01b0316825260208082015190830152604080820151908301526060808201519083015260808082015115159083015260a0908101511515910152565b60008251613d77818460208701614138565b9190910192915050565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b602082015260008351613dd7816035850160208801614138565b620101e160ed1b6035918401918201528351613dfa816038840160208801614138565b01603801949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e3e816017850160208801614138565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613e6f816028840160208801614138565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b6020808252825182820181905260009190848201906040850190845b81811015613ee757613ed4838551613d21565b9284019260c09290920191600101613ec1565b50909695505050505050565b6020815260008251806020840152613f12816040850160208701614138565b601f01601f19169190910160400192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60c081016106c68284613d21565b9687526001600160a01b03959095166020870152604086019390935260608501919091526080840152151560a0830152151560c082015260e00190565b604051601f8201601f1916810167ffffffffffffffff811182821017156140ce576140ce614222565b604052919050565b600082198211156140e9576140e96141ca565b500190565b6000826140fd576140fd6141e0565b500490565b600081600019048311821515161561411c5761411c6141ca565b500290565b600082821015614133576141336141ca565b500390565b60005b8381101561415357818101518382015260200161413b565b83811115611e095750506000910152565b600081614173576141736141ca565b506000190190565b600060001982141561418f5761418f6141ca565b5060010190565b600060ff821660ff8114156141ad576141ad6141ca565b60010192915050565b6000826141c5576141c56141e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ede57600080fd5b8015158114610ede57600080fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df0f12730a928a4962fe43a16f6eeadd2e4115f67e5bb27844e950bf690db59f64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2589,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2919,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6706,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "exchanger",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 6709,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "asset",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IERC20)3596"
      },
      {
        "astId": 6713,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeightPositions",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6717,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeights",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_struct(StrategyWeight)9830_storage)dyn_storage"
      },
      {
        "astId": 6720,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "cashStrategy",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(IStrategy)9945"
      },
      {
        "astId": 6723,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "m2m",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IMark2Market)9801"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StrategyWeight)9830_storage)dyn_storage": {
        "base": "t_struct(StrategyWeight)9830_storage",
        "encoding": "dynamic_array",
        "label": "struct IPortfolioManager.StrategyWeight[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3596": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMark2Market)9801": {
        "encoding": "inplace",
        "label": "contract IMark2Market",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)9945": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyWeight)9830_storage": {
        "encoding": "inplace",
        "label": "struct IPortfolioManager.StrategyWeight",
        "members": [
          {
            "astId": 9819,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9821,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9823,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9825,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9827,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 9829,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabledReward",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}